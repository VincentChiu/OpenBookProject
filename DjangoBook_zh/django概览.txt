Django at a glance

This document is for Django's SVN release, which can be significantly different from previous releases. Get old docs here: 0.96, 0.95. 

Because Django was developed in a fast-paced newsroom environment, it was designed to make common Web-development tasks fast and easy. Here’s an informal overview of how to write a database-driven Web app with Django.
因为Django起源于一个快节奏的新闻编辑部，所以它被设计成一个快速而简单进行普通web设计的框架。在这里，将通过一个基于数据库驱动的Web应用程序设计案例来带您初步领略Django的魅力。

The goal of this document is to give you enough technical specifics to understand how Django works, but this isn’t intended to be a tutorial or reference. Please see our more-detailed Django documentation when you’re ready to start a project.
本篇文档的目的在于给你足够的技术细节来理解Django是怎么工作的，而不是一篇指南或者参考。当你准备开始一个项目的时候，请阅读后续的Django文档来得到更多的细节。

Design your model
设计你的模型（model）
Although you can use Django without a database, it comes with an object-relational mapper in which you describe your database layout in Python code.
尽管在你使用Django的时候可能没有用到数据库，但是Django提供了对象关系映射（ORM，object-relational mapper) 来处理数据库，使得在有数据库环境下的Web设计也是非常地简单。简单来说，你只需要使用python代码来描述你的数据库规划，而不用涉及SQL语句。

The data-model syntax offers many rich ways of representing your models — so far, it’s been solving two years’ worth of database-schema problems. Here’s a quick example:
数据模型的语法题提供了许多方法来表示你的模型，下面是一个简单的例子：


#code--------------------------------------
class Reporter(models.Model):
    full_name = models.CharField(max_length=70)

    def __unicode__(self):
        return self.full_name

class Article(models.Model):
    pub_date = models.DateTimeField()
    headline = models.CharField(max_length=200)
    article = models.TextField()
    reporter = models.ForeignKey(Reporter)

    def __unicode__(self):
        return self.headline
#endcode----------------------------------------

Install it
安装模型
Next, run the Django command-line utility to create the database tables automatically:
设计完模型后，可以运行Django的命令行工具来自动创建数据表

manage.py syncdb

The syncdb command looks at all your available models and creates tables in your database for whichever tables don’t already exist.
syncdb命令会查找你创建的所有模型，如果该模型在数据库中没有对应的表，就自动创建相应的表


Enjoy the free API
享受自由的API
With that, you’ve got a free, and rich, Python API to access your data. The API is created on the fly, no code generation necessary:
Django为你提供了自由、丰富的python API来存取你的数据，使用这些API不必书写任何代码

#command-line---------------------------------
>>> from mysite.models import Reporter, Article

# No reporters are in the system yet.
>>> Reporter.objects.all()
[]

# Create a new Reporter.
>>> r = Reporter(full_name='John Smith')

# Save the object into the database. You have to call save() explicitly.
>>> r.save()

# Now it has an ID.
>>> r.id
1

# Now the new reporter is in the database.
>>> Reporter.objects.all()
[John Smith]

# Fields are represented as attributes on the Python object.
>>> r.full_name
'John Smith'

# Django provides a rich database lookup API.
>>> Reporter.objects.get(id=1)
John Smith
>>> Reporter.objects.get(full_name__startswith='John')
John Smith
>>> Reporter.objects.get(full_name__contains='mith')
John Smith
>>> Reporter.objects.get(id=2)
Traceback (most recent call last):
    ...
DoesNotExist: Reporter does not exist for {'id__exact': 2}

# Create an article.
>>> from datetime import datetime
>>> a = Article(pub_date=datetime.now(), headline='Django is cool',
...     article='Yeah.', reporter=r)
>>> a.save()

# Now the article is in the database.
>>> Article.objects.all()
[Django is cool]

# Article objects get API access to related Reporter objects.
>>> r = a.reporter
>>> r.full_name
'John Smith'

# And vice versa: Reporter objects get API access to Article objects.
>>> r.article_set.all()
[Django is cool]

# The API follows relationships as far as you need, performing efficient
# JOINs for you behind the scenes.
# This finds all articles by a reporter whose name starts with "John".
>>> Article.objects.filter(reporter__full_name__startswith="John")
[Django is cool]

# Change an object by altering its attributes and calling save().
>>> r.full_name = 'Billy Goat'
>>> r.save()

# Delete an object with delete().
>>> r.delete()

#endcommand-line--------------------------------------------

A dynamic admin interface: it’s not just scaffolding — it’s the whole house
一个动态的admin接口：它不是脚手架，而是整座房子（意味着admin接口具有完整的功能，可以直接使用）

Once your models are defined, Django can automatically create a professional, production ready administrative interface — a Web site that lets authenticated users add, change and delete objects. It’s as easy as adding a line of code to your model classes:
一旦你定义了你的模型，django可以自动建立一个专业的、产品化的管理员接口，这个接口以网页的形式为授权用户提供添加、更改、删除模型对象的功能。要使用admin管理你的模型对象，只需要简单的在模型类中添加一行代码：

#code------------------------------------------
class Article(models.Model):
    pub_date = models.DateTimeField()
    headline = models.CharField(max_length=200)
    article = models.TextField()
    reporter = models.ForeignKey(Reporter)
    class Admin: pass

#endcode-----------------------------------------


The philosophy here is that your site is edited by a staff, or a client, or maybe just you — and you don’t want to have to deal with creating backend interfaces just to manage content.
这里的哲学意味是：如果你的网站允许职员、客户、或者你自己修改，而你不想只是为了管理网站内容而建立一个页面时，可以简单而直接的使用admin接口。

One typical workflow in creating Django apps is to create models and get the admin sites up and running as fast as possible, so your staff (or clients) can start populating data. Then, develop the way data is presented to the public.
建立Django应用的一个典型工作流程为：创建模型，然后搭建起admin页面并尽快运行起来，这样你的职员或者客户能够很快的装载数据，接着开发向公众展示这些数据的其他页面。

Design your URLs
设计URLS
A clean, elegant URL scheme is an important detail in a high-quality Web application. Django encourages beautiful URL design and doesn’t put any cruft in URLs, like .php or .asp.
一个简洁、优雅的URL模式是一个高质量web应用程序不可或缺的部分。Django倡导优美的URL设计，不会像php，asp那样将不美观的后缀放到URL中。

To design URLs for an app, you create a Python module called a URLconf. A table of contents for your app, it contains a simple mapping between URL patterns and Python callback functions. URLconfs also serve to decouple URLs from Python code.
为了一个app设计URL,需要建立一个叫URLconf的python模块。这个模块是一张app内容的关联表，包含了URL模式和python回调函数之间的映射关系，同时，URLconf可以用于减弱python代码之间的耦合。

Here’s what a URLconf might look like for the Reporter/Article example above:
对应于上面的Reporter/Article例子，它的URLconf可能设计成如下的样子：
#code-------------------------------------
from django.conf.urls.defaults import *

urlpatterns = patterns('',
    (r'^articles/(\d{4})/$', 'mysite.views.year_archive'),
    (r'^articles/(\d{4})/(\d{2})/$', 'mysite.views.month_archive'),
    (r'^articles/(\d{4})/(\d{2})/(\d+)/$', 'mysite.views.article_detail'),
)
#endcode-----------------------------------


The code above maps URLs, as simple regular expressions, to the location of Python callback functions (“views”). The regular expressions use parenthesis to “capture” values from the URLs. When a user requests a page, Django runs through each pattern, in order, and stops at the first one that matches the requested URL. (If none of them matches, Django calls a special-case 404 view.) This is blazingly fast, because the regular expressions are compiled at load time.
上面的这段代码，使用简单的正则表达式来表示各个URL，并将它们和本地的python回调函数相关联（这些函数通常在视图view中）。正则表达式使用括号来获取URL中传过来的值。当用户请求一个页面时，django由上到下遍历每一个模式，找到第一个符合的正则表达式，并调这个正则表达式对应的函数来处理用户的请求（如果没有一个模式匹配用户的输入，django会返回一个专门的404页面）。这种方式是非常迅速的，因为正则表达式在URLs模块导入的时候就已经编译好的了。

Once one of the regexes matches, Django imports and calls the given view, which is a simple Python function. Each view gets passed a request object — which contains request metadata — and the values captured in the regex.
一旦django找到一个匹配的正则表达式，django会导入并调用对应的视图（view），它通常是一个简单的python函数。每一个视图（view）会接受一个请求（request）对象。这个请求（request）对象封装了请求的元数据和正则表达式捕获到的值。

For example, if a user requested the URL “/articles/2005/05/39323/”, Django would call the function mysite.views.article_detail(request, '2005', '05', '39323').
例如：一个用户输入URL“/articles/2005/05/39323/”，django就会调用函数mysite.views.article_detail(request, '2005', '05', '39323').


Write your views
编写视图（view）
Each view is responsible for doing one of two things: Returning an HttpResponse object containing the content for the requested page, or raising an exception such as Http404. The rest is up to you.
每一个视图都必须至少做一件事情：返回一个HttpResponse对象或者抛出一个异常如Http404.至于其他的事情则取决于设计者的需要。

Generally, a view retrieves data according to the parameters, loads a template and renders the template with the retrieved data. Here’s an example view for year_archive from above:
通常来说，视图（view）会根据参数获取数据，然后导入一个模板（template）并用获取的数据对模板进行渲染。下面的代码是上面例子中的一个year_archieve视图（view）

#code-----------------------------------------
def year_archive(request, year):
    a_list = Article.objects.filter(pub_date__year=year)
    return render_to_response('news/year_archive.html', {'year': year, 'article_list': a_list})
#endcode------------------------------------


This example uses Django’s template system, which has several powerful features but strives to stay simple enough for non-programmers to use.
这个例子使用了django的模板系统，django的模板系统具有强大的功能，并且在使用上，其设计者努力使其保持尽可能的简单。


Design your templates
设计模板（template）

The code above loads the news/year_archive.html template.
上面的代码导入了模板：“news/year_archive.html”

Django has a template search path, which allows you to minimize redundancy among templates. In your Django settings, you specify a list of directories to check for templates. If a template doesn’t exist in the first directory, it checks the second, and so on.
Django使用一个模板搜索路径来减少导入模板是的路径冗余信息。在你的Django settings.py文件中，你可以定义一系列的模板文件夹，导入模板的时候，Django会逐一在每个文件夹中寻找对应的模板。

Let’s say the news/article_detail.html template was found. Here’s what that might look like:
假设我们找到了news/article_detail.html模板，它可能会是下面这个样子：

{% extends "base.html" %}

{% block title %}Articles for {{ year }}{% endblock %}

{% block content %}
<h1>Articles for {{ year }}</h1>

{% for article in article_list %}
<p>{{ article.headline }}</p>
<p>By {{ article.reporter.full_name }}</p>
<p>Published {{ article.pub_date|date:"F j, Y" }}</p>
{% endfor %}
{% endblock %}


Variables are surrounded by double-curly braces. {{ article.headline }} means “Output the value of the article’s headline attribute.” But dots aren’t used only for attribute lookup: They also can do dictionary-key lookup, index lookup and function calls.
Django的模板中，变量是用双大括号{{}}括住的。{{ article.headline }}表示在这个地方输出文章的标题属性。注意，符号点“.”并不只用于属性查找，它同样可以表示字典查找，索引查找，或者函数调用。


Note {{ article.pub_date|date:"F j, Y" }} uses a Unix-style “pipe” (the “|” character). This is called a template filter, and it’s a way to filter the value of a variable. In this case, the date filter formats a Python datetime object in the given format (as found in PHP’s date function; yes, there is one good idea in PHP).
注意到，代码{{ article.pub_date|date:"F j, Y" }}使用了一个Unix风格的管道符号“|”，它表示调用模板过滤器，是一种将变量值转化的方法。在这个例子中，date过滤器将python的datetime对象格式化成一种特定的形式。


You can chain together as many filters as you’d like. You can write custom filters. You can write custom template tags, which run custom Python code behind the scenes.
只要你愿意，你可以将一堆的过滤器串接起来。你可以编写自己的过滤器，也可以自定义模板的tags，模板的tags是在后台运行的python代码。

Finally, Django uses the concept of “template inheritance”: That’s what the {% extends "base.html" %} does. It means “First load the template called ‘base’, which has defined a bunch of blocks, and fill the blocks with the following blocks.” In short, that lets you dramatically cut down on redundancy in templates: each template has to define only what’s unique to that template.
在这篇概览的最后，会介绍Django的模板的继承。代码{% extends "base.html" %}表示本模板继承一个"base.html"模板并扩展它。它意味着：首先载入base.html模板，这个模板定义了一连串的空块，然后用对应的块来填充base.html中的空块。总的来说，这可以明显减少模板中的冗余，因为每一个模板只需要定义不同的部分即可，相同的部分可以通过继承来获得。

Here’s what the “base.html” template might look like:
下面的代码显示了"base.html"的样子：
#code-------------------------------------------
<html>
<head>
    <title>{% block title %}{% endblock %}</title>
</head>
<body>
    <img src="sitelogo.gif" alt="Logo" />
    {% block content %}{% endblock %}
</body>
</html>
#endcode-----------------------------------------


Simplistically, it defines the look-and-feel of the site (with the site’s logo), and provides “holes” for child templates to fill. This makes a site redesign as easy as changing a single file — the base template.
简单来说，base.html定义了网站的总体感观，并留出空块让子模板区填充，当你要重新设计这个网站外观的时候，你只需要更改一个文件————base模板.

It also lets you create multiple versions of a site, with different base templates, while reusing child templates. Django’s creators have used this technique to create strikingly different cell-phone editions of sites — simply by creating a new base template.
同样，模板继承可以允许你设计不同版本的网站，你需要做的只是设计不同的base模板，并重用子模板。Django网站的设计者简单的设计了一个新的base模板，就建起了一个完全不同的、用于手机的移动版本网站。

Note that you don’t have to use Django’s template system if you prefer another system. While Django’s template system is particularly well-integrated with Django’s model layer, nothing forces you to use it. For that matter, you don’t have to use Django’s database API, either. You can use another database abstraction layer, you can read XML files, you can read files off disk, or anything you want. Each piece of Django — models, views, templates — is decoupled from the next.
注意:你不必使用Djago的模板系统，你可以随意选择其他的模板系统。Django的模板系统只是很好地整合在Djago模型的表层，没有任何理由强迫你使用它。从这点来说，你也可以不使用Django的数据库API，你可以使用其他的数据库抽象层，你可以读取XML文件，离线读取文件，或干其他你喜欢的事情。Django的三个层次：模型（models）、视图（views）、模板（templates）之间的耦合是非常松散的。


This is just the surface
This has been only a quick overview of Django’s functionality. Some more useful features:
这些知识皮毛
这只是Django的功能的快速概览，更对的有用特性如下：

A caching framework that integrates with memcached or other backends. 
A syndication framework that makes creating RSS and Atom feeds as easy as writing a small Python class. 
More sexy automatically-generated admin features — this overview barely scratched the surface. 
The next obvious steps are for you to download Django, read the tutorial and join the community. Thanks for your interest!
一个缓存的框架，这个框架整合内存缓存及其它终端页面
一个syndication框架，它使得建立RSS和Atom就和写一个简单的python类一样简单。
更多诱人的自动生成的admin功能，这篇概览只是简要介绍了admin接口的很少一部分。
显然，你下一步应当下载Django、阅读开发指南、加入社区。谢谢！

