编写你的第一个Django应用


Let’s learn by example.
让我们按照例子一步一步的学习怎样建立一个Django应用吧。

Throughout this tutorial, we’ll walk you through the creation of a basic poll application.
通过这篇学习指南，我们会带你建立一个简单的民意调查网站。

It’ll consist of two parts:
民意调查网站包括两部分：

A public site that lets people view polls and vote in them. 
An admin site that lets you add, change and delete polls. 
1、一个让用户民意调查和查看结果的公共页面
2、一个管理员页面，管理员可以通过这个页面来添加、更改、删除民意调查主题。

We’ll assume you have Django installed already. You can tell Django is installed by running the Python interactive interpreter and typing import django. If that command runs successfully, with no errors, Django is installed.
这里我们假设你已经安装好了Django。你可以在python的交互窗口中输入 import django，如果这句命理执行成功（没有错误提示），表示你已经安装好了Django。

#Note----------
Where to get help:
到哪里寻求帮助：

If you’re having trouble going through this tutorial, please post a message to django-users or drop by #django on irc.freenode.net and we’ll try to help.
在看这篇学习指南时，如果遇到问题，可以到<a>django-users</a>网上论坛或者到irc.freenode.net 上的IRC频道：<a>#django</a>上面去提问。
#END Note-------------------


Creating a project
If this is your first time using Django, you’ll have to take care of some initial setup. Namely, you’ll need to auto-generate some code that establishes a Django project — a collection of settings for an instance of Django, including database configuration, Django-specific options and application-specific settings.
建立一个工程
如果这是你第一次使用Django，你必须注意建立一个Django项目的一些细节。你需要让Django自动生成一些代码来建立一个项目。这些代码是一个Django实例的配置，包括数据库的设置、关于Django的特殊设置、关于你这个项目的特殊设置。

From the command line, cd into a directory where you’d like to store your code, then run the command django-admin.py startproject mysite. This will create a mysite directory in your current directory.
在命令行下进入到你想建立项目的文件夹中，运行命令：django-admin.py startproject mysite，这会在你当前的文件夹中新建一个叫mysite的文件夹，里面就是自动生成的初始代码。

#note---------------
Mac OS X permissions
关于MAC OS X的权限
If you’re using Mac OS X, you may see the message “permission denied” when you try to run django-admin.py startproject. This is because, on Unix-based systems like OS X, a file must be marked as “executable” before it can be run as a program. To do this, open Terminal.app and navigate (using the cd command) to the directory where django-admin.py is installed, then run the command chmod +x django-admin.py.
如果你使用的是MAC OS X操作系统，在你运行django-admin.py startproject的时候，可能会看到“permission denied”的错误提示。这是因为在基于Unix的操作系统中，如果一个文件要运行，它必须被设置为可执行的（executable）。你可以打开终端，进入到放置django-admin.py的文件夹，运行命令：chmod +x django-admin.py 来给django-admin.py加上可执行标记。

Note
注意：
You’ll need to avoid naming projects after built-in Python or Django components. In particular, this means you should avoid using names like django (which will conflict with Django itself) or site (which conflicts with a built-in Python package).
你的项目名称不能够与django或者python的内建模块名相同，例如，你不能使用django来命名你的项目，因为这会和Django自身相冲突，你也不能使用site来命名你的项目，因为python一个内建的模块也叫site。
#EndNote--------------------------------

(django-admin.py should be on your system path if you installed Django via python setup.py. If it’s not on your path, you can find it in site-packages/django/bin, where site-packages is a directory within your Python installation. Consider symlinking to django-admin.py from some place on your path, such as /usr/local/bin.)
（如果你通过运行python setup.py install来安装Django，那么django-admin.py应该会配置到你的系统路径中。如果django-admin.py不在你的系统路径中，你可以在python安装目录下的sita-packages/django/bin中找到它，这时，你可以考虑在/usr/local/bin这样的系统路径中添加django-admin.py的符号链接来简化你以后使用django-admin.py的操作。）

#Note---------------------
Where should this code live?
我的项目代码应该放在那里？
If your background is in PHP, you’re probably used to putting code under the Web server’s document root (in a place such as /var/www). With Django, you don’t do that. It’s not a good idea to put any of this Python code within your Web server’s document root, because it risks the possibility that people may be able to view your code over the Web. That’s not good for security.
如果你以前使用的是PHP，你可能习惯将代码放在web服务器的文档根目录中（document root），例如在/var/www/。你使用Django的时候，并不需要这样做，而且这样做也不是一个好的方法，因为用户可能会在网上看到你的程序代码，造成安全隐患。

Put your code in some directory outside of the document root, such as /home/mycode.
你可以将你的代码放到文档根目录外，如/home/mycode这样的地方。

#Endnote----------------------

Let’s look at what startproject created:
让我们来看一看startproject命令建立了什么：

mysite/
    __init__.py
    manage.py
    settings.py
    urls.py
    
These files are:
这些文件分别是：

__init__.py: An empty file that tells Python that this directory should be considered a Python package. (Read more about packages in the official Python docs if you’re a Python beginner.) 
__init__.py:它是一个空的文件，用来告诉python这个文件夹会被当成一个python的包。（如果你是python的初学者，你可以查阅python的官方文档<a></a>来查找关于python包的更多信息。

manage.py: A command-line utility that lets you interact with this Django project in various ways. 
manage.py：一个命令行工具，为你提供与Django项目交互多种方法。

settings.py: Settings/configuration for this Django project. 
settings.py:Django项目的相关设置。

urls.py: The URL declarations for this Django project; a “table of contents” of your Django-powered site. 
urls.py:Django项目的URL声明。可以看作是用Django建立的网站的目录。


The development server
内置的开发用web服务器
Let’s verify this worked. Change into the mysite directory, if you haven’t already, and run the command python manage.py runserver. You’ll see the following output on the command line:
现在，让我们检验下我们建立的项目是否可以运行。进入mysite目录，然后运行python manage.py runserver，你可以在命令行中看到如下的输出：

#code----------------------
Validating models...
0 errors found.

Django version 0.95, using settings 'mysite.settings'
Development server is running at http://127.0.0.1:8000/
Quit the server with CONTROL-C (Unix) or CTRL-BREAK (Windows).
#endcode-------------------------------------

You’ve started the Django development server, a lightweight Web server written purely in Python. We’ve included this with Django so you can develop things rapidly, without having to deal with configuring a production server — such as Apache — until you’re ready for production.
这时候你已经启动了Django内置的开发用web服务器，这是一个用python写的轻量级web服务器。我们将这个web服务器包含在Django中，目的是可以让你更快的开发项目，而不是花时间在生产环境服务器（如apache）的配置上，如果你准备将你的项目发布到实际应用中，你才需要去配置实际应用中的服务器。

Now’s a good time to note: DON’T use this server in anything resembling a production environment. It’s intended only for use while developing. (We’re in the business of making Web frameworks, not Web servers.)
你必须很清楚，不要将这个内置的服务器用在实际的生产环境中，它的主要是为了在项目开发中使用。我们的优势是在网页框架（web framework）而不是在网页服务器上。

Now that the server’s running, visit http://127.0.0.1:8000/ with your Web browser. You’ll see a “Welcome to Django” page, in pleasant, light-blue pastel. It worked!
既然服务器已经运行了，请使用网页浏览器访问http://127.0.0.1:8000/，你可以看到一个“Welcome to Django”的页面，恭喜你，你的Django可以工作了。

#note----------------------
Changing the port
更改服务器的端口

By default, the runserver command starts the development server on port 8000. If you want to change the server’s port, pass it as a command-line argument. For instance, this command starts the server on port 8080:
默认情况下，runserver命令开启的服务器会监听8000端口，如果你想更改服务器的端口，可以将端口作为命令行参数传递过去。例如，下面的命令会将在8080端口上启动服务器。

python manage.py runserver 8080


Full docs for the development server are at django-admin documentation.
有关这个内置服务器的完整文档在<a>django-admin文档中</a>


Database setup
建立数据库
Now, edit settings.py. It’s a normal Python module with module-level variables representing Django settings. Change these settings to match your database’s connection parameters:
修改settings.py文件，这是一个包含Django项目设置的python模块，请根据你数据库的实际情况来设置里面的数据库连接参数。

DATABASE_ENGINE — Either ‘postgresql_psycopg2’, ‘mysql’ or ‘sqlite3’. Other backends are also available. 
DATABASE_NAME — The name of your database, or the full (absolute) path to the database file if you’re using SQLite. 
DATABASE_USER — Your database username (not used for SQLite). 
DATABASE_PASSWORD — Your database password (not used for SQLite). 
DATABASE_HOST — The host your database is on. Leave this as an empty string if your database server is on the same physical machine (not used for SQLite). 

DATABASE_ENGINE: 数据引擎参数，可以填写‘postgresql_psycopg2’、 ‘mysql’、‘sqlite3’等。
DATABASE_NAME：所使用的数据库名，如果你使用SQLite的话，请填写数据库文件的绝对路径
DATABASE_USER：连接数据库所用的用户名。使用SQLite库不用填写该项
DATABASE_PASSWORD：连接数据库所用的密码。使用SQLite库不用填写该项
DATABASE_HOST：你数据库所在的主机。如果你的数据库就在本地，请将该项留空。使用SQLite库不用填写该项

#note---------------------
Note

If you’re using PostgreSQL or MySQL, make sure you’ve created a database by this point. Do that with “CREATE DATABASE database_name;” within your database’s interactive prompt.
如果你使用PostgreSQL或者MySQL，请确定你已经建立了数据库。如果你还没有建立数据库，请在数据库的交互提示符下输入命令：CREATE DATABASE database_name;来创建一个数据库。
#endnote--------------------------


While you’re editing settings.py, take note of the INSTALLED_APPS setting towards the bottom of the file. That variable holds the names of all Django applications that are activated in this Django instance. Apps can be used in multiple projects, and you can package and distribute them for use by others in their projects.
在你修改settings.py的时候，请注意靠近该文件底部的INSTALLED_APPS设置。该项设置对应这个Django项目所有激活的应用。同一个应用可以用在不同的项目中。你可以打包和分发不同的应用，以便它们可以重用在不同的项目中。

By default, INSTALLED_APPS contains the following apps, all of which come with Django:
INSTALLED_APPS设置默认保留如下的参数：

django.contrib.auth — An authentication system. 
django.contrib.contenttypes — A framework for content types. 
django.contrib.sessions — A session framework. 
django.contrib.sites — A framework for managing multiple sites with one Django installation. 
django.contrib.auth — 一个认证系统。 
django.contrib.contenttypes — 内容类别框架
django.contrib.sessions — 会话框架。
django.contrib.sites — 管理多个站点的框架


These applications are included by default as a convenience for the common case.
这些应用都是默认包含的，以方便日常的应用。

Each of these applications makes use of at least one database table, though, so we need to create the tables in the database before we can use them. To do that, run the following command:
这里的每一个应用至少都使用了一个数据表，所以在我们使用它们之前要在数据库中建立相应数据表：

python manage.py syncdb


The syncdb command looks at the INSTALLED_APPS setting and creates any necessary database tables according to the database settings in your settings.py file. You’ll see a message for each database table it creates, and you’ll get a prompt asking you if you’d like to create a superuser account for the authentication system. Go ahead and do that.
syncdb命令会扫描INSTALLED_APPS设置的每一项，然后根据settings.py中数据库的设置，在对应数据库中建立每一个应用所需要的表。在执行这个命令时，你可以看到建立表的信息，如果你没有建立一个超级用户的话，还会提示你建立一个认证系统的超级用户。

If you’re interested, run the command-line client for your database and type \dt (PostgreSQL), SHOW TABLES; (MySQL), or .schema (SQLite) to display the tables Django created.
运行了syncdb命令后，你可以运行数据库的命令行客户端来查看创建了哪些表。显示数据库中所有数据表的命令分别是：PostgreSQL(\dt),MySQL(SHOW TABLE),SQLite(.schema) 

#note--------------------------
For the minimalists
最低要求：
Like we said above, the default applications are included for the common case, but not everybody needs them. If you don’t need any or all of them, feel free to comment-out or delete the appropriate line(s) from INSTALLED_APPS before running syncdb. The syncdb command will only create tables for apps in INSTALLED_APPS.
正如我们上面所说，默认的应用是为了方便日常应用，但是并不是每个人都需要它们。在运行syncdb之前，你可以很自由的将应用参数注释或者删除，这样，syncdb就不会创建所注释或删除的应用的数据表。
#endnote-----------------------


Creating models
创建模型（ model）
Now that your environment — a “project” — is set up, you’re set to start doing work.
现在，你的项目环境已经设置好了，你可以开始你项目的工作了。

Each application you write in Django consists of a Python package, somewhere on your Python path, that follows a certain convention. Django comes with a utility that automatically generates the basic directory structure of an app, so you can focus on writing code rather than creating directories.
在Django中所写的每一个项目组成一个Python模块包，并添加到Python路径中。这样是非常方便的。Django提供了一个工具，能够根据每个应用文件结构，所以你可以专注于编写项目代码。

#note---------------------------------
Projects vs. apps
项目和应用
What’s the difference between a project and an app? An app is a Web application that does something — e.g., a weblog system, a database of public records or a simple poll app. A project is a collection of configuration and apps for a particular Web site. A project can contain multiple apps. An app can be in multiple projects.
项目和应用有什么区别呢？一个应用就是一个可以完成一项任务的web应用，例如一个博客系统，公共民意调查系统等。而一个项目是由一些列设置和应用所组成额一个网站。一个项目可以包含许多个应用，而一个应用可以用于许多个项目中。

#endnote---------------------------------


In this tutorial, we’ll create our poll app in the mysite directory, for simplicity. As a consequence, the app will be coupled to the project — that is, Python code within the poll app will refer to mysite.polls. Later in this tutorial, we’ll discuss decoupling your apps for distribution.
这篇指南中，我们会在mysite文件夹中创建一个民意调查应用。因为如此，这个应用必须和项目连接起来，在使用民意调查应用里面的python代码时，必须使用mysite.polls来引用。在指南的后面，我们会讨论如何将你的应用脱离一个项目，以方便分发。

To create your app, make sure you’re in the mysite directory and type this command:
为了建立这个应用，你必须在命令行中进入mysite文件夹，然后输入下面的命令：
python manage.py startapp polls

That’ll create a directory polls, which is laid out like this:
这样会建立一个polls文件夹，目录树如下：

polls/
    __init__.py
    models.py
    views.py
    
This directory structure will house the poll application.
这个文件结构就是poll应用的目录，保存了整个poll应用的所有代码。

The first step in writing a database Web app in Django is to define your models — essentially, your database layout, with additional metadata.
Django中，写一个数据库web应用的第一步就是定义你的模型（model），本质上来说，模型就是你数据库的设计规划和额外的元数据。

#note--------------
Philosophy
哲学观
A model is the single, definitive source of data about your data. It contains the essential fields and behaviors of the data you’re storing. Django follows the DRY Principle. The goal is to define your data model in one place and automatically derive things from it.
模型是关于你数据的唯一的、明确的定义。它包含了你保存数据的数据域和相应操作。Django遵循<a>DRY原则</a>，模型目标就是在一处定义你的数据模型，然后根据这个模型自动生成的对象。

In our simple poll app, we’ll create two models: polls and choices. A poll has a question and a publication date. A choice has two fields: the text of the choice and a vote tally. Each choice is associated with a poll.
在我们这个简单的民意调查应用中，我们会创建两个模型：polls和choices。一个poll由问题和公布的时间组成，一个choice则包含了两个数据域：选项的文字和统计。每一个choice对应于一个poll。

These concepts are represented by simple Python classes. Edit the polls/models.py file so it looks like this:
用python类来表达上面的概念，按如下编辑polls/models.py文件。

#code----------------------------
from django.db import models

class Poll(models.Model):
    question = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')

class Choice(models.Model):
    poll = models.ForeignKey(Poll)
    choice = models.CharField(max_length=200)
    votes = models.IntegerField()
#endcode--------------------------------    

#note---------------------------------    
Errors about max_length
max_length出错
If Django gives you an error message saying that max_length is not a valid argument, you’re most likely using an old version of Django. (This version of the tutorial is written for the latest development version of Django.) If you’re using a Subversion checkout of Django’s development version (see the installation docs for more information), you shouldn’t have any problems.
如果Django返回一个错误信息说max_length不是一个合法的参数，你可能使用了旧版本的Django。本指南对应于Django最新的开发版本。如果你使用Subversion来检出一个Django的开发版（详情请看<a>安装文档</a>），你不应当得到这个错误提示。

If you want to stick with an older version of Django, you’ll want to switch to the Django 0.96 tutorial, because this tutorial covers several features that only exist in the Django development version.
如果你依然想使用旧版本的Django，你应当查阅Django0.96的指南。因为本指南包含了Django开发版的几个新特性。
#endcode--------------------------------

The code is straightforward. Each model is represented by a class that subclasses django.db.models.Model. Each model has a number of class variables, each of which represents a database field in the model.
这段代码是简单明了的，每个模型用一个类来表示，这个类继承于django.db.models.Model。每个模型都有几个类变量，这些类变量表示模型在数据库中的数据域。

Each field is represented by an instance of a models.*Field class — e.g., models.CharField for character fields and models.DateTimeField for datetimes. This tells Django what type of data each field holds.
每个数据域都用一个models.*Field类的对象来表示。例如models.CharField表示字符类型域，models.DateTimeField 表示日期时间类型域。这告诉Django每个数据域的数据类型。

The name of each models.*Field instance (e.g. question or pub_date ) is the field’s name, in machine-friendly format. You’ll use this value in your Python code, and your database will use it as the column name.
每个models.*Field对象的名字（如question或pub_date）是数据域的名字。你会在你的Python代码中使用它们，数据库也会用它们做列属性名。

You can use an optional first positional argument to a Field to designate a human-readable name. That’s used in a couple of introspective parts of Django, and it doubles as documentation. If this field isn’t provided, Django will use the machine-readable name. In this example, we’ve only defined a human-readable name for Poll.pub_date. For all other fields in this model, the field’s machine-readable name will suffice as its human-readable name.
你可以选择为数据域指定一个别名以增强可读性。别名是可选的，如果使用别名，则在数据域的第一个参数中指定。如果没有指定别名，Django会使用原名来表示数据。在这个例子中，我们只定义了Poll.pub_date的别名，其他数据域的原名已经足够方便人们理解其意思，所以并没有指定别名。

Some Field classes have required elements. CharField, for example, requires that you give it a max_length. That’s used not only in the database schema, but in validation, as we’ll soon see.
一些域需要其他参数，例如CharField，需要你定义max_length，这些参数不只是用在数据库中，而且也用于数据有效性的校验。

Finally, note a relationship is defined, using models.ForeignKey. That tells Django each Choice is related to a single Poll. Django supports all the common database relationships: many-to-ones, many-to-manys and one-to-ones.
最后，我们注意到本例定义了一个数据表关系：models.ForeignKey。它告诉Django，每一个Choice对象对应一个确定的Poll对象。Django支持所有的数据库关系，包括多对一，多对多，一对一。

Activating models
激活模型
That small bit of model code gives Django a lot of information. With it, Django is able to:
上面的那小段代码包含了很多信息。Django可以利用这些信息进行下面的操作：

Create a database schema (CREATE TABLE statements) for this app. 
Create a Python database-access API for accessing Poll and Choice objects. 
1、为这个应用创建一个数据库模型（使用CREATE TABLE语句）
2、创建一个python数据库存取API用于存取Poll和Choice对象。

But first we need to tell our project that the polls app is installed.
但是，在让Django干这些事情之前，我们必须让项目知道我们的应用已经安装。

#note------------------------
Philosophy
哲学观
Django apps are “pluggable”: You can use an app in multiple projects, and you can distribute apps, because they don’t have to be tied to a given Django installation.
Django的应用是可插卸的，你可以发布应用以用在不同的项目中，因为它们不是和某一个Django或者某一个项目绑定的。
#endcode---------------------------


Edit the settings.py file again, and change the INSTALLED_APPS setting to include the string 'mysite.polls'. So it’ll look like this:
我们再编辑settings.py文件，在INSTALLED_APPS项中添加字符串mysite.polls，添加完后的INSTALLED_APPS参数可能如下代码所示：

#code---------------------------
INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'mysite.polls'
)
#endcode--------------------------

Now Django knows mysite includes the polls app. Let’s run another command:
现在，Django知道mysite项目中安装了polls的应用。让我们在命令行提示符下再运行另外一个命令：

#code------------------------
python manage.py sql polls
#endcode-------------------------

You should see something similar to the following (the CREATE TABLE SQL statements for the polls app):
在命令行窗口中你应该能够看到和下面类似的信息（这个信息就是为polls应用创建表的CREATE TABLE语句）：

#code-----------------------------
BEGIN;
CREATE TABLE "polls_poll" (
    "id" serial NOT NULL PRIMARY KEY,
    "question" varchar(200) NOT NULL,
    "pub_date" timestamp with time zone NOT NULL
);
CREATE TABLE "polls_choice" (
    "id" serial NOT NULL PRIMARY KEY,
    "poll_id" integer NOT NULL REFERENCES "polls_poll" ("id"),
    "choice" varchar(200) NOT NULL,
    "votes" integer NOT NULL
);
COMMIT;
#endcode---------------------------------

Note the following:
请注意：
1、The exact output will vary depending on the database you are using. 
实际信息取决于你所用的数据库。

2、Table names are automatically generated by combining the name of the app (polls) and the lowercase name of the model — poll and choice. (You can override this behavior.) 
创建的数据表名是自动生成的，它由应用的名字（polls）和模型的小写名字（poll和choice）连结而成。当然，你可以覆盖这个操作来自定义表名。

3、Primary keys (IDs) are added automatically. (You can override this, too.) 
数据表的主键（IDs）是自动添加的，你可以覆盖这个操作来自定义主键。

4、By convention, Django appends "_id" to the foreign key field name. Yes, you can override this, as well. 
按照惯例，Django会在外键名后面添加“_id”，同样，你也可以覆盖它。

5、The foreign key relationship is made explicit by a REFERENCES statement. 
外键关系是通过显式声明一个REFERENCES语句来实现的。

6、It’s tailored to the database you’re using, so database-specific field types such as auto_increment (MySQL), serial (PostgreSQL), or integer primary key (SQLite) are handled for you automatically. Same goes for quoting of field names — e.g., using double quotes or single quotes. The author of this tutorial runs PostgreSQL, so the example output is in PostgreSQL syntax. 
Django会为你的数据库生成合适的SQL语句。不同的数据库所使用的语句可能会有差别，例如不同的数据库对自动增加域的声明不同，在MySQL使用auto_increment，在PostgreSQL中会使用serial，在SQLite中会使用integer primary key，有如一些数据库会使用双引号或者单引号将属性列名字括起来，这些差别都由Django负责处理而无需用户操心。因为本指南所使用的数据库是PostgreSQL，所以上面的输出信息是PostgreSQL的语法。


7、The sql command doesn’t actually run the SQL in your database - it just prints it to the screen so that you can see what SQL Django thinks is required. If you wanted to, you could copy and paste this SQL into your database prompt. However, as we will see shortly, Django provides an easier way of committing the SQL to the database. 
上面的sql命令并不会在你的数据库中运行SQL语句，它只是将SQL显示在屏幕上，使你可以清楚知道Django生成了怎么样的SQL语句。如果你愿意，你可以将那段语句复制粘贴到数据库的交互提示符下并执行。当然，在后面我们可以看到，Django提供了一个非常简单的方法将这段SQL语句提交到数据库中。

If you’re interested, also run the following commands: 
很好，如果你对这里感兴趣，你可以尝试输入下面的命令；
python manage.py validate — Checks for any errors in the construction of your models. 
python manage.py validate — 检查你设计的模型在结构上的错误

python manage.py sqlcustom polls — Outputs any custom SQL statements (such as table modifications or constraints) that are defined for the application. 
python manage.py sqlcustom polls — 输出在这个应用中自定义的SQL语句，例如数据表的修改语句，或者定义约束的语句。

python manage.py sqlclear polls — Outputs the necessary DROP TABLE statements for this app, according to which tables already exist in your database (if any). 
python manage.py sqlclear polls — 输出必要的DROP TABLE语句，如果要创建的表已经存在，会将先已存在的表删除。

python manage.py sqlindexes polls — Outputs the CREATE INDEX statements for this app. 
python manage.py sqlindexes polls — 输出这个应用中的CREATE INDEX语句。

python manage.py sqlall polls — A combination of all the SQL from the ‘sql’, ‘sqlcustom’, and ‘sqlindexes’ commands. 
python manage.py sqlall polls — sql，sqlcustom，sqlindexes命令输出的结合。

Looking at the output of those commands can help you understand what’s actually happening under the hood.
这些命令的输出能够让你清楚知道底层发生了什么事情。

Now, run syncdb again to create those model tables in your database:
现在，运行syncdb命令在你的数据库中建立上面定义的模型对应的两个表。

python manage.py syncdb


The syncdb command runs the sql from ‘sqlall’ on your database for all apps in INSTALLED_APPS that don’t already exist in your database. This creates all the tables, initial data and indexes for any apps you have added to your project since the last time you ran syncdb. syncdb can be called as often as you like, and it will only ever create the tables that don’t exist.
syncdb命令会检查INSTALLED_APPS参数中的每一个安装的应用，如果对应的某个应用的数据表不存在，则在数据库中执行‘sqlall’命令显示的所有语句。它会创建自上一次运行syncdb命令以来添加的应用所对应的数据表、索引、初始数据。你可以随时运行syncdb命令，它只会创建数据库中不存在的表。

Read the django-admin.py documentation for full information on what the manage.py utility can do.
查阅<a>django-admin.py文档</a>，你可以清楚知道manage.py的所有命令的功能。

Playing with the API
与API打交道：
Now, let’s hop into the interactive Python shell and play around with the free API Django gives you. To invoke the Python shell, use this command:
现在，让我们尝试一些别的东西。我们将进入python的交互shell中体验一下Django的API。要调用python的shell，请输入下面的命令：

python manage.py shell


We’re using this instead of simply typing “python”, because manage.py sets up the project’s environment for you. “Setting up the environment” involves two things:
我们使用上面的命令而不是“python”，因为manage.py会帮你设置好项目的环境，设置项目环境包括下面两件事情：

1、Putting mysite on sys.path. For flexibility, several pieces of Django refer to projects in Python dotted-path notation (e.g. 'mysite.polls.models'). In order for this to work, the mysite package has to be on sys.path.
将mysite添加到sys.path中，为了更具灵活性，Django项目中的模块通过加点的路径来引用（如mysite.polls.models），所以我们必须将mysite这个模块包添加到系统的路径下（sys.path）

We’ve already seen one example of this: the INSTALLED_APPS setting is a list of packages in dotted-path notation.
我们已经看到过一些加点路径表示的模块，如在INSTALLED_APPS的设置中我们可以看到一列的模块使用了加点路径表示法。

2、Setting the DJANGO_SETTINGS_MODULE environment variable, which gives Django the path to your settings.py file.
设置DJANGO_SETTINGS_MODULES环境变量，这样Django可以找到你项目中的settings.py文件。

#node---------------------------------
Bypassing manage.py
不使用manage.py

If you’d rather not use manage.py, no problem. Just make sure mysite is at the root level on the Python path (i.e., import mysite works) and set the DJANGO_SETTINGS_MODULE environment variable to mysite.settings.
如果你不想使用manage.py也没有关系。你首先需要确保mysite文件夹在你的python路径中（即import mysite能正常工作）。然后你要设置DJANGO_SETTINGS_MODULES环境变量，使它指向你项目的settings.py文件

For more information on all of this, see the django-admin.py documentation.
想了解更多这方面的知识，请查阅<a>django-admin.py文档</a>。
#endnode---------------------------------


Once you’re in the shell, explore the database API:
如果你进入了python的shell，你可以体验Django的数据库API了。

#code-----------------------------------------------
# Import the model classes we just wrote.   导入我们刚才设计的模型类
>>> from mysite.polls.models import Poll, Choice

# No polls are in the system yet.     现在还没有民意调查在我们的系统中
>>> Poll.objects.all()
[]

# Create a new Poll.    建立一个新的民意调查
>>> import datetime
>>> p = Poll(question="What's up?", pub_date=datetime.datetime.now())

# Save the object into the database. You have to call save() explicitly.
将新建的民意调查保存在数据库中。你必须显式调用save()
>>> p.save()

# Now it has an ID. Note that this might say "1L" instead of "1", depending
# on which database you're using. That's no biggie; it just means your
# database backend prefers to return integers as Python long integer
# objects.
现在有一个ID存在了，注意这个ID可能显示为“1L”而不是“1”，这依赖于你所选用的数据库。这无伤大雅，它只表示数据库端使用长整型来返回整型。
>>> p.id
1

# Access database columns via Python attributes.
使用python的属性来访问数据库的属性列
>>> p.question
"What's up?"
>>> p.pub_date
datetime.datetime(2007, 7, 15, 12, 00, 53)

# Change values by changing the attributes, then calling save().
更改属性的值并调用save(),可以更改数据库
>>> p.pub_date = datetime.datetime(2007, 4, 1, 0, 0)
>>> p.save()

# objects.all() displays all the polls in the database.
objects.all()会显示数据库中所有的民意调查
>>> Poll.objects.all()
[<Poll: Poll object>]

#endcode---------------------------------------------------------

Wait a minute. <Poll: Poll object> is, utterly, an unhelpful representation of this object. Let’s fix that by editing the polls model (in the polls/models.py file) and adding a __unicode__() method to both Poll and Choice:
我们注意到，<Poll: Poll object>并不能很好地表示这个对象，我们可以通过修改模型的类来更改它。我们在polls/models.py的Poll类和Choice类中添加__unicode__() 的方法：

#code-------------------------------------
class Poll(models.Model):
    # ...
    def __unicode__(self):
        return self.question

class Choice(models.Model):
    # ...
    def __unicode__(self):
        return self.choice
#endcode---------------------------------------        

#node---------------------------------------        
If __unicode__() doesn’t seem to work
为什么__unicode__() 无效：

If you add the __unicode__() method to your models and don’t see any change in how they’re represented, you’re most likely using an old version of Django. (This version of the tutorial is written for the latest development version of Django.) If you’re using a Subversion checkout of of Django’s development version (see the installation docs for more information), you shouldn’t have any problems.
如果你添加了__unicode__() 方法后，显示的结构没有任何改变，那么你可能使用了旧版本的Django。本指南对应于Django最新的开发版本。如果你使用Subversion来检出一个Django的开发版（详情请看<a>安装文档</a>），你不应当得到这个错误提示。

If you want to stick with an older version of Django, you’ll want to switch to the Django 0.96 tutorial, because this tutorial covers several features that only exist in the Django development version.
如果你依然想使用旧版本的Django，你应当查阅Django0.96的指南。因为本指南包含了Django开发版的几个新特性。
#endnode-----------------------------------------------------------

It’s important to add __unicode__() methods to your models, not only for your own sanity when dealing with the interactive prompt, but also because objects’ representations are used throughout Django’s automatically-generated admin.
添加__unicode__()方法是很重要的。它不但能够有助你对在交互提示符下查阅对象，而且Django自动生成的管理工具也会用到它来表示对象。

#node--------------------------------------------
Why __unicode__() and not __str__()?
为什么使用__unicode__() 而不是 __str__()？

If you’re familiar with Python, you might be in the habit of adding __str__() methods to your classes, not __unicode__() methods. We use __unicode__() here because Django models deal with Unicode by default. All data stored in your database is converted to Unicode when it’s returned.
如果你熟悉，你可能会添加__str__()方法到你的类中，而不是__unicode__()。我们在这里使用__unicode__()是因为Unicode是Django的默认编码。数据库中的所有数据在返回的时候都会转换到Unicode。

Django models have a default __str__() method that calls __unicode__() and converts the result to a UTF-8 bytestring. This means that unicode(p) will return a Unicode string, and str(p) will return a normal string, with characters encoded as UTF-8.
Django的模型都有一个默认的__str__()方法，这个__str__()方法会调用__unicode__()，然后将结果转换为UTF-8的编码形式。这意味着unicode(p)会返回一个Unicode的字符串，而str(p)会返回一个UTF-8编码的字符串。

If all of this is jibberish to you, just remember to add __unicode__() methods to your models. With any luck, things should Just Work for you.
如果你搞不清__unicode__()和__str__()，你只需记得将__unicode__()添加到你的模型中，在正常情况下它能很好的工作。

#endnode------------------------------------------------------


Note these are normal Python methods. Let’s add a custom method, just for demonstration:
注意到我们添加的都是python的方法。那让我们添加一些自定义的方法：

#code--------------------------------
import datetime
# ...
class Poll(models.Model):
    # ...
    def was_published_today(self):
        return self.pub_date.date() == datetime.date.today()

#endcode---------------------------------------------------


Note the addition of import datetime to reference Python’s standard datetime module.
注意，这里我们添加了import datetime来引用python的标准日期时间（datetime)模块。

Let’s jump back into the Python interactive shell by running python manage.py shell again:
现在让我们又回到python的交互shell（运行python manage.py shell）

#code---------------------------------------------------
>>> from mysite.polls.models import Poll, Choice

# Make sure our __unicode__() addition worked.
确保我们添加的__unicode__()正常工作
>>> Poll.objects.all()
[<Poll: What's up?>]

# Django provides a rich database lookup API that's entirely driven by
# keyword arguments.
Django提供了丰富的数据库查询API，他们都是根据关键字来查询的。
>>> Poll.objects.filter(id=1)
[<Poll: What's up?>]
>>> Poll.objects.filter(question__startswith='What')
[<Poll: What's up?>]

# Get the poll whose year is 2007. Of course, if you're going through this
# tutorial in another year, change as appropriate.
获取2007年的所有民意调查，当然，如果你在其他年份查看这份指南，请适当更改这个年份。
>>> Poll.objects.get(pub_date__year=2007)
<Poll: What's up?>

>>> Poll.objects.get(id=2)
Traceback (most recent call last):
    ...
DoesNotExist: Poll matching query does not exist.

# Lookup by a primary key is the most common case, so Django provides a
# shortcut for primary-key exact lookups.
# The following is identical to Poll.objects.get(id=1).
通过主键来查找是很常用的方法，所以Django提供了精确查找主键的简便方法，下面的语句和Poll.objects.get(id=1)的效果是一样的
>>> Poll.objects.get(pk=1)
<Poll: What's up?>

# Make sure our custom method worked.
确保我们定义的方法能够正常工作
>>> p = Poll.objects.get(pk=1)
>>> p.was_published_today()
False

# Give the Poll a couple of Choices. The create call constructs a new
# choice object, does the INSERT statement, adds the choice to the set
# of available choices and returns the new Choice object.
为Poll添加几个Choice，create函数调用构造函数来新建Choice对象然后执行INSERT语句将他们插入到数据库中，最后返回这个新建的Choice对象。
>>> p = Poll.objects.get(pk=1)
>>> p.choice_set.create(choice='Not much', votes=0)
<Choice: Not much>
>>> p.choice_set.create(choice='The sky', votes=0)
<Choice: The sky>
>>> c = p.choice_set.create(choice='Just hacking again', votes=0)

# Choice objects have API access to their related Poll objects.
Choice对象可以通过API来访问与它们关联的Poll对象。
>>> c.poll
<Poll: What's up?>

# And vice versa: Poll objects get access to Choice objects.
反过来，Poll对象也可以通过API来访问与其相关联的Choice对象。
>>> p.choice_set.all()
[<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]
>>> p.choice_set.count()
3

# The API automatically follows relationships as far as you need.
# Use double underscores to separate relationships.
# This works as many levels deep as you want; there's no limit.
# Find all Choices for any poll whose pub_date is in 2007.
数据库API会自动追溯对象的关系，只要你需要，这个关系可以跨度足够长。使用双下划线来将关系连接起来，它没有深度的限制。下面的语句会搜索发布时间是2007年的民意调查所关联的所有选项。

>>> Choice.objects.filter(poll__pub_date__year=2007)
[<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]

# Let's delete one of the choices. Use delete() for that.
让我们使用delete()来删除一个选项（choice）。
>>> c = p.choice_set.filter(choice__startswith='Just hacking')
>>> c.delete()


For full details on the database API, see our Database API reference.
为了得到关于数据库API的完整细节，请查阅<a>数据库API参考</a>


When you’re comfortable with the API, read part 2 of this tutorial to get Django’s automatic admin working.
当你熟悉了上面的数据库API，请看指南的<a>第二部分</a>，第二部分将讲述admin的功能。
