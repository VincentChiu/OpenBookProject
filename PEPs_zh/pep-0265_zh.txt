PEP: 265
Title: Sorting Dictionaries by Value
    根据字典值排序
Version: $Revision: 43264 $
Last-Modified: $Date: 2006-03-24 04:13:19 +0800 (Fri, 24 Mar 2006) $
Author: g2@iowegian.com (Grant Griffin)
Status: Rejected
Type: Standards Track
Created: 8-Aug-2001
Python-Version: 2.2
Post-History:


概念 Abstract 

    This PEP suggests a "sort by value" operation for dictionaries.
    The primary benefit would be in terms of "batteries included"
    support for a common Python idiom which, in its current form, is
    both difficult for beginners to understand and cumbersome for all
    to implement.
    
    本PEP 是有关建议字典"据值排序"的支持，并作为"电池内置"特性进入通用Py支持,
    当然解决这类问题是比较困难的.

判决 BDFL Pronouncement

    This PEP is rejected because the need for it has been largely
    fulfilled by Py2.4's sorted() builtin function:
    此PEP 已作废, 因为Py2.4 的 sorted() 内建函式已经完美的支持了:

        >>> sorted(d.iteritems(), key=itemgetter(1), reverse=True)
        [('b', 23), ('d', 17), ('c', 5), ('a', 2), ('e', 1)]

    or for just the keys:

        sorted(d, key=d.__getitem__, reverse=True)
        ['b', 'd', 'c', 'a', 'e']

    Also, Python 2.5's heapq.nlargest() function addresses the common use
    case of finding only a few of the highest valued items:
    同时, Py2.5 中的 heapq.nlargest() 函式还提供了仅返回最高值对的支持:

        >>> nlargest(2, d.iteritems(), itemgetter(1))
        [('b', 23), ('d', 17)]


诱因 Motivation 

    A common use of dictionaries is to count occurrences by setting
    the value of d[key] to 1 on its first occurrence, then increment
    the value on each subsequent occurrence.  This can be done several
    different ways, but the get() method is the most succinct:
    
    通常用户字典后,对值进行用增量方式记录时,会用 get() :

            d[key] = d.get(key, 0) + 1

    Once all occurrences have been counted, a common use of the
    resulting dictionary is to print the occurrences in
    occurrence-sorted order, often with the largest value first.
    
    这样在使用时,通常用户期望输出 值最大的那个字典值对;

    This leads to a need to sort a dictionary's items by value.  The
    canonical method of doing so in Python is to first use d.items()
    to get a list of the dictionary's items, then invert the ordering
    of each item's tuple from (key, value) into (value, key), then
    sort the list; since Python sorts the list based on the first item
    of the tuple, the list of (inverted) items is therefore sorted by
    value.  If desired, the list can then be reversed, and the tuples
    can be re-inverted back to (key, value).  (However, in my
    experience, the inverted tuple ordering is fine for most purposes,
    e.g. printing out the list.)
    
    这时就需要对字典根据值来排序. 标准作法是利用 d.item() 得到字典的值列表,
    将每个字典条目从(键,值)转换成(值,键)的元组,进行排序;然后再转换回正常的 (键,值) 方式.
    (在笔者的体验中,这种方式可以支持大多数需求)

    For example, given an occurrence count of:
    例如,

        >>> d = {'a':2, 'b':23, 'c':5, 'd':17, 'e':1}

    we might do:
    我们可以:

        >>> items = [(v, k) for k, v in d.items()]
        >>> items.sort()
        >>> items.reverse()             # so largest is first
        >>> items = [(k, v) for v, k in items]

    resulting in:
    結果:

        >>> items
        [('b', 23), ('d', 17), ('c', 5), ('a', 2), ('e', 1)]

    which shows the list in by-value order, largest first.  (In this
    case, 'b' was found to have the most occurrences.)
    得到依照值大小排序的元组(在此例中,b就是出现次数最多的事件)

    This works fine, but is "hard to use" in two aspects.  First,
    although this idiom is known to veteran Pythoneers, it is not at
    all obvious to newbies -- either in terms of its algorithm
    (inverting the ordering of item tuples) or its implementation
    (using list comprehensions -- which are an advanced Python
    feature.)  Second, it requires having to repeatedly type a lot of
    "grunge", resulting in both tedium and mistakes.
    
    这种形式可用,但是进行两次转换很麻烦.而且,首先,这种思路只有老手才习惯用;
    其次,过程中数据转换了多次,容易出错.

    We therefore would rather Python provide a method of sorting
    dictionaries by value which would be both easy for newbies to
    understand (or, better yet, not to _have to_ understand) and
    easier for all to use.
    
    所以,我们建议,提供一个简单易理解的方式来解决字典据值排序的需求.


原理 Rationale 

    As Tim Peters has pointed out, this sort of thing brings on the
    problem of trying to be all things to all people.  Therefore, we
    will limit its scope to try to hit "the sweet spot".  Unusual
    cases (e.g. sorting via a custom comparison function) can, of
    course, be handled "manually" using present methods.
    
    正如 Tim Peters 指出的,这是个所有人都头痛的事儿.

    Here are some simple possibilities:
    这儿有些简单的对策:

    The items() method of dictionaries can be augmented with new
    parameters having default values that provide for full
    backwards-compatibility:
    字典的 items() 本身就提供了相应支持:

        (1) items(sort_by_values=0, reversed=0)

    or maybe just:

        (2) items(sort_by_values=0)

    since reversing a list is easy enough.
    所以,转换成对应列表是非常简便的.

    Alternatively, items() could simply let us control the (key, value) 
    order:
    可选的, items() 也同样让我们可以简单的控制(键,值)对的排序:    

        (3) items(values_first=0)

    Again, this is fully backwards-compatible.  It does less work than
    the others, but it at least eases the most complicated/tricky part
    of the sort-by-value problem: inverting the order of item tuples.
    Using this is very simple:
    另外,这是完全向后兼容的. 通过简单的语句,就可以轻易的解决多数"按值排序"的问题:
    同样是转换成元组,但是非常简便:

        items = d.items(1)
        items.sort()
        items.reverse()         # (if desired)

    The primary drawback of the preceding three approaches is the
    additional overhead for the parameter-less "items()" case, due to
    having to process default parameters.  (However, if one assumes
    that items() gets used primarily for creating sort-by-value lists,
    this is not really a drawback in practice.)
    可以使用默认参数(当然用一个参数时,就是建立一个 据值排序 的列表)

    Alternatively, we might add a new dictionary method which somehow
    embodies "sorting".  This approach offers two advantages.  First,
    it avoids adding overhead to the items() method.  Second, it is
    perhaps more accessible to newbies: when they go looking for a
    method for sorting dictionaries, they hopefully run into this one,
    and they will not have to understand the finer points of tuple
    inversion and list sorting to achieve sort-by-value.
    当然,我们可以追加一个内置支持.这一般有两个优势:
    1, 可以直接追加在 items() 之上.
    2, 令新手容易接受:当他们在搜索字典排序时,可能就期望找到对应的函式,运行一下就完事儿.

    To allow the four basic possibilities of sorting by key/value and in 
    forward/reverse order, we could add this method:
    考虑到之前描述的需求,我们可以追加这种方法:

        (4) sorted_items(by_value=0, reversed=0)

    I believe the most common case would actually be "by_value=1,
    reversed=1", but the defaults values given here might lead to
    fewer surprises by users: sorted_items() would be the same as
    items() followed by sort().
    我相信,这是最通用的需求,指出 根据那个值进行排序,已经是否倒序,
    不过,默认参数可能带给用户一点惊奇:
    sorted_items() 可能和 items() + sort() 的结果相同

    Finally (as a last resort), we could use:
    最后,我们可能用:

        (5) items_sorted_by_value(reversed=0)


实施 Implementation

    The proposed dictionary methods would necessarily be implemented
    in C.  Presumably, the implementation would be fairly simple since
    it involves just adding a few calls to Python's existing
    machinery.    


相关 Concerns

    Aside from the run-time overhead already addressed in
    possibilities 1 through 3, concerns with this proposal probably
    will fall into the categories of "feature bloat" and/or "code
    bloat".  However, I believe that several of the suggestions made
    here will result in quite minimal bloat, resulting in a good
    tradeoff between bloat and "value added".

    Tim Peters has noted that implementing this in C might not be
    significantly faster than implementing it in Python today.
    However, the major benefits intended here are "accessibility" and
    "ease of use", not "speed".  Therefore, as long as it is not
    noticeably slower (in the case of plain items(), speed need not be
    a consideration.


参考 References

    A related thread called "counting occurrences" appeared on
    comp.lang.python in August, 2001.  This included examples of
    approaches to systematizing the sort-by-value problem by
    implementing it as reusable Python functions and classes.


Copyright

    This document has been placed in the public domain.



Local Variables:
mode: indented-text
indent-tabs-mode: nil
End:

