<?xml version="1.0" encoding="utf-8"?>
<chapter id="plural">
<?dbhtml filename="dynamic_functions/index.html"?>
<title>动态函数</title>
<titleabbrev id="plural.numberonly">第 17 章</titleabbrev>
<section id="plural.divein">
<title>概览</title>
<abstract>
<title/>
<para>我想谈谈名词复数。还有，返回其它函数的函数，高级的正则表达式和生成器 (Generator)。生成器是 &python; 2.3 新引入的。但首先还是让我们先来谈谈如何生成名词复数。</para>
</abstract>
<para>如果你还没有看过 <xref linkend="re"/>，现在是个绝佳的机会。这章中假定你已理解了正则表达式的基础内容并迅速深入更高级的应用。</para>
<para>英语是一个吸收很多外来语而令人疯掉的语言，把单数名词变成复数的规则则是复杂而又多变的。有规则，有例外，更有例外的例外。</para>
<para>如果你在英语国家长大或是在正规学校学习了英语，你可能对下面的基本规则很熟悉：</para>
<orderedlist>
<listitem><para>如果一个词以 S, X 或 Z 结尾，加 ES。如 <quote>Bass</quote> 变成 <quote>basses</quote>，<quote>fax</quote> 变成 <quote>faxes</quote>，还有 <quote>waltz</quote> 变成 <quote>waltzes</quote>。</para></listitem>
<listitem><para>如果一个词以发音的 H 结尾，加 ES；若以不发音的 H 结尾，加 S。什么是发音的 H？和其他字母混合在一起发出一个你可以听到的声音。那么，<quote>coach</quote> 变成 <quote>coaches</quote> ，<quote>rash</quote> 变成 <quote>rashes</quote>，因为在读出来时，你可以听到 CH 和 SH 的声音。但是，<quote>cheetah</quote> 变成 <quote>cheetahs</quote>，因为 H 不发音。</para></listitem>
<listitem><para>如果一个词以发 I 音的 Y 结尾，把 Y 变成 IES；如果 Y 与元音搭配在一起发出其他声音则只添加 S。因此，<quote>vacancy</quote> 变成 <quote>vacancies</quote>，但 <quote>day</quote> 变成 <quote>days</quote>。</para></listitem>
<listitem><para>如果一切规则都不适用，就只添加 S 并祈祷不会错。</para></listitem>
</orderedlist>
<para>(我知道有很多例外情况，比如：<quote>Man</quote> 变成 <quote>men</quote>，<quote>woman</quote> 变成 <quote>women</quote>，但是，<quote>human</quote> 却变成 <quote>humans</quote>。<quote>Mouse</quote> 变成 <quote>mice</quote>，<quote>louse</quote> 变成 <quote>lice</quote>，但是，<quote>house</quote> 却变成 <quote>houses</quote>。<quote>Knife</quote> 变成 <quote>knives</quote>，<quote>wife</quote> 变成 <quote>wives</quote>，但是 <quote>lowlife</quote> 却变成 <quote>lowlifes</quote>。更不要说那些复数根本就不需要变化的词了，比如 <quote>sheep</quote>, <quote>deer</quote> 和 <quote>haiku</quote>。)</para>
<para>其他的语言当然完全不同。</para>
<para>让我们来设计一个复数化名词的模块吧！从英语名词开始，仅考虑上面的四种规则，但是记得你将来需要不断添加规则，更可能最后添加进更多的语言。</para>
</section>
<section id="plural.stage1">
<?dbhtml filename="dynamic_functions/stage1.html"?>
<title>&plural_filename;, 第 1 阶段</title>
<abstract>
<title/>
<para>你所针对的单词 (至少在英语中) 是字符串和字符。你还需要规则来找出不同的字符 (字母) 组合，并对它们进行不同的操作。这听起来像是正则表达式的工作。</para>
</abstract>
<example>
<title><filename>plural1.py</filename></title>
<programlisting>
&importre;

&p1_defplural;
&p1_if1; <co id="plural.stage1.1.1"/>
&p1_return1; <co id="plural.stage1.1.2"/>
&p1_if2;
&p1_return2;
&p1_if3;
&p1_return3;
&p1_else;
&p1_return4;
</programlisting>
<calloutlist>
<callout arearefs="plural.stage1.1.1">
<para>好啦，这是一个正则表达式，但是它使用了你在 <xref linkend="re"/> 中未曾见过的语法。方括号的意思是 <quote>完全匹配这些字符中的一个</quote>。也就是说，<literal>[sxz]</literal> 意味着 <quote><literal>s</literal>，或者 <literal>x</literal>，再或者 <literal>z</literal></quote>，但只是其中的一个。<literal>$</literal> 应该不陌生，它意味着匹配字符串的结尾。也就是说，检查 <varname>noun</varname> 是否以 <literal>s</literal>，<literal>x</literal>，或者 <literal>z</literal> 结尾。</para>
</callout>
<callout arearefs="plural.stage1.1.2">
<para><function>re.sub</function> 函数进行以正则表达式为基础的替换工作。让我们更具体地看看它。</para>
</callout>
</calloutlist>
</example>
<example>
<title><function>re.sub</function> 介绍</title>
<screen>
&prompt;<userinput>import re</userinput>
&prompt;<userinput>re.search('[abc]', 'Mark')</userinput>   <co id="plural.stage1.2.1"/>
<computeroutput>&lt;_sre.SRE_Match object at 0x001C1FA8></computeroutput>
&prompt;<userinput>re.sub('[abc]', 'o', 'Mark')</userinput> <co id="plural.stage1.2.2"/>
<computeroutput>'Mork'</computeroutput>
&prompt;<userinput>re.sub('[abc]', 'o', 'rock')</userinput> <co id="plural.stage1.2.3"/>
<computeroutput>'rook'</computeroutput>
&prompt;<userinput>re.sub('[abc]', 'o', 'caps')</userinput> <co id="plural.stage1.2.4"/>
<computeroutput>'oops'</computeroutput>
</screen>
<calloutlist>
<callout arearefs="plural.stage1.2.1">
<para><literal>Mark</literal> 包含 <literal>a</literal>，<literal>b</literal>，或者 <literal>c</literal>吗？是的，含有 <literal>a</literal>。</para>
</callout>
<callout arearefs="plural.stage1.2.2">
<para>好的，现在找出 <literal>a</literal>，<literal>b</literal>，或者 <literal>c</literal> 并以 <literal>o</literal> 取代之。<literal>Mark</literal> 就变成 <literal>Mork</literal> 了。</para>
</callout>
<callout arearefs="plural.stage1.2.3">
<para>同一方法可以将 <literal>rock</literal> 变成 <literal>rook</literal>。</para>
</callout>
<callout arearefs="plural.stage1.2.4">
<para>你可能认为它可以将 <literal>caps</literal> 变成 <literal>oaps</literal>，但事实并非如此。<literal>re.sub</literal> 替换<emphasis>所有</emphasis> 的匹配项，并不只是第一个匹配项。因此正则表达式将会把 <literal>caps</literal> 变成 <literal>oops</literal>，因为 <literal>c</literal> 和 <literal>a</literal> 都被转换为 <literal>o</literal>了。</para>
</callout>
</calloutlist>
</example>
<example>
<title>回到 <filename>plural1.py</filename></title>
<programlisting>
&importre;

&p1_defplural;
&p1_if1;
&p1_return1; <co id="plural.stage1.3.1"/>
&p1_if2; <co id="plural.stage1.3.2"/>
&p1_return2; <co id="plural.stage1.3.3"/>
&p1_if3;
&p1_return3;
&p1_else;
&p1_return4;
</programlisting>
<calloutlist>
<callout arearefs="plural.stage1.3.1">
<para>回到 <function>plural</function> 函数。你在做什么？你在以 <literal>es</literal> 取代字符串的结尾。换句话说，追加 <literal>es</literal> 到字符串。你可以通过字符串拼合做到相同的事，例如 <literal>noun + 'es'</literal>，但是我使用正则表达式做这一切，既是为了保持一致，也是为了本章稍后你会明白的其它原因。</para>
</callout>
<callout arearefs="plural.stage1.3.2">
<para>仔细看看，这是另一个新的内容。<literal>^</literal> 是方括号里面的第一个字符，这有特别的含义：否定。<literal>[^abc]</literal> 意味着 <quote> 除 <literal>a</literal>、 <literal>b</literal>、 和 <literal>c</literal> <emphasis>以外的</emphasis> 任意单字符</quote>。所以，<literal>[^aeioudgkprt]</literal> 意味着除 <literal>a</literal>、 <literal>e</literal>、 <literal>i</literal>、 <literal>o</literal>、 <literal>u</literal>、 <literal>d</literal>、 <literal>g</literal>、 <literal>k</literal>、 <literal>p</literal>、 <literal>r</literal> 和 <literal>t</literal> 以外的任意字符。这个字符之后应该跟着一个 <literal>h</literal>，然后是字符串的结尾。你在寻找的是以发音的 H 结尾的单词。</para>
</callout>
<callout arearefs="plural.stage1.3.3">
<para>这是一个相似的表达：匹配 Y 前面<emphasis>不是</emphasis> <literal>a</literal>、 <literal>e</literal>、 <literal>i</literal>、 <literal>o</literal> 和 <literal>u</literal>，并以这个 Y 结尾的单词。你在查找的是以发 I 音的 Y 结尾的单词。</para>
</callout>
</calloutlist>
</example>
<example>
<title>正则表达式中否定的更多应用</title>
<screen>
&prompt;<userinput>import re</userinput>
&prompt;<userinput>re.search('[^aeiou]y$', 'vacancy')</userinput> <co id="plural.stage1.4.1"/>
<computeroutput>&lt;_sre.SRE_Match object at 0x001C1FA8></computeroutput>
&prompt;<userinput>re.search('[^aeiou]y$', 'boy')</userinput>     <co id="plural.stage1.4.2"/>
&prompt;
&prompt;<userinput>re.search('[^aeiou]y$', 'day')</userinput>
&prompt;
&prompt;<userinput>re.search('[^aeiou]y$', 'pita')</userinput>    <co id="plural.stage1.4.3"/>
&prompt;
</screen>
<calloutlist>
<callout arearefs="plural.stage1.4.1">
<para><literal>vacancy</literal> 匹配这个正则表达式，因为它以 <literal>cy</literal> 结尾，并且 <literal>c</literal> 不在 <literal>a</literal>、 <literal>e</literal>、 <literal>i</literal>、 <literal>o</literal> 和 <literal>u</literal> 之列。</para>
</callout>
<callout arearefs="plural.stage1.4.2">
<para><literal>boy</literal> 不能匹配，因为它以 <literal>oy</literal> 结尾，并且你特别指出 <literal>y</literal> 之前的字符不可以是 <literal>o</literal>。<literal>day</literal> 不能匹配是因为以 <literal>ay</literal> 结尾。</para>
</callout>
<callout arearefs="plural.stage1.4.3">
<para><literal>pita</literal> 不匹配是因为不以 <literal>y</literal> 结尾。</para>
</callout>
</calloutlist>
</example>
<example>
<title>更多的 <function>re.sub</function></title>
<screen>
&prompt;<userinput>re.sub('y$', 'ies', 'vacancy')</userinput>              <co id="plural.stage1.5.1"/>
<computeroutput>'vacancies'</computeroutput>
&prompt;<userinput>re.sub('y$', 'ies', 'agency')</userinput>
<computeroutput>'agencies'</computeroutput>
&prompt;<userinput>re.sub('([^aeiou])y$', r'\1ies', 'vacancy')</userinput> <co id="plural.stage1.5.2"/>
<computeroutput>'vacancies'</computeroutput>
</screen>
<calloutlist>
<callout arearefs="plural.stage1.5.1">
<para>正则表达式把 <literal>vacancy</literal> 变为 <literal>vacancies</literal>，把 <literal>agency</literal> 变为 <literal>agencies</literal>，这正是你想要的。注意，将 <literal>boy</literal> 变成 <literal>boies</literal> 是可行的，但是永远不会发生，因为 <function>re.search</function> 首先确定是否应该应用 <function>re.sub</function>。</para>
</callout>
<callout arearefs="plural.stage1.5.2">
<para>顺便提一下，可以将两个正则表达式 (一个确定规则适用与否，一个应用规则) 合并在一起成为一个正则表达式。这便是合并后的样子。它的大部分已经很熟悉：你应用的是在 <xref linkend="re.phone"/> 学过的记忆组 (remembered group) 记住 <literal>y</literal> 之前的字符。然后再替换字符串，你使用一个新的语法 <literal>\1</literal>，这意味着：<quote>嘿！记得前面的第一个组吗？把它放这儿</quote>。就此而言，记住了 <literal>y</literal> 之前的 <literal>c</literal> ，然后你做替换工作，你将 <literal>c</literal> 替换到 <literal>c</literal> 的位置，并将 <literal>ies</literal> 替换到 <literal>y</literal> 的位置。(如果你有不止一个组则可以使用 <literal>\2</literal> 或者 <literal>\3</literal> 等等。)</para>
</callout>
</calloutlist>
</example>
<para>正则表达式替换非常强大，并且 <literal>\1</literal> 语法使之更加强大。但是将整个操作放在一个正则表达式中仍然晦涩难懂，也不能与前面描述的复数规则直接呼应。你原来列出的规则，比如 <quote>如果单词以 S，X 或者 Z 结尾，结尾追加 ES</quote>。如果你在函数中看到两行代码描述 <quote>如果单词以 S，X 或者 Z 结尾，结尾追加 ES</quote>，更加直观些。</para>
</section>

<section id="plural.stage2">
<?dbhtml filename="dynamic_functions/stage2.html"?>
<title>&plural_filename;, 第 2 阶段</title>
<abstract>
<title/>
<para>现在你将增加一个抽象过程。你从定义一个规则列表开始：如果这样，就做那个，否则判断下一规则。让我们暂时将程序一部分复杂化以便使另一部分简单化。</para>
</abstract>
<example>
<title><filename>plural2.py</filename></title>
<programlisting>
&importre;

&p2_defmatch1;
&p2_return1m;

&p2_defapply1;
&p2_return1a;

&p2_defmatch2;
&p2_return2m;

&p2_defapply2;
&p2_return2a;

&p2_defmatch3;
&p2_return3m;
        
&p2_defapply3;
&p2_return3a;

&p2_defmatch4;
&p2_return4m;
        
&p2_defapply4;
&p2_return4a;

&p2_rules; <co id="plural.stage2.1.1"/>

&p2_defplural;
&p2_for; <co id="plural.stage2.1.2"/>
&p2_if; <co id="plural.stage2.1.3"/>
&p2_return; <co id="plural.stage2.1.4"/>
</programlisting>
<calloutlist>
<callout arearefs="plural.stage2.1.1">
<para>这个版本看起来更加复杂 (至少是长了)，但做的工作没有变化：试图顺序匹配四种不同规则，并在匹配时应用恰当的正则表达式。不同之处在于，每个独立的匹配和应用规则都在自己的函数中定义，并且这些函数列于 <varname>rules</varname> 变量这个元组的元组之中。</para>
</callout>
<callout arearefs="plural.stage2.1.2">
<para>使用一个 &for; 循环，你可以根据 <varname>rules</varname> 元组一次性进行匹配和应用规则两项工作 (一个匹配和一个应用)。&for; 循环第一轮中，<varname>matchesRule</varname> 将使用 <function>match_sxz</function>，<varname>applyRule</varname> 将使用 <function>apply_sxz</function>；在第二轮中 (假设真走到了这么远)，<varname>matchesRule</varname> 将被赋予 <function>match_h</function>，<varname>applyRule</varname> 将被赋予 <function>apply_h</function>。</para>
</callout>
<callout arearefs="plural.stage2.1.3">
<para>记住 <link linkend="odbchelper.objects">&python; 中的一切都是对象</link>，包括函数。<varname>rules</varname> 包含函数；不是指函数名，而是指函数本身。当 <varname>matchesRule</varname> 和 <varname>applyRule</varname> 在 &for; 循环中被赋值后，它们就成了你可以调用的真正函数。因此，在 &for; 循环第一轮中，这就相当于调用 <function>matches_sxz(noun)</function>。</para>
</callout>
<callout arearefs="plural.stage2.1.4">
<para>在 &for; 循环第一轮中，这就相当于调用 <function>apply_sxz(noun)</function>，等等。</para>
</callout>
</calloutlist>
</example>
<para>这个抽象过程有些令人迷惑，试着剖析函数看看实际的等价内容。这个 &for; 循环相当于：</para>
<example>
<title>剖析 <function>plural</function> 函数</title>
<programlisting>
def plural(noun):
    if match_sxz(noun):
        return apply_sxz(noun)
    if match_h(noun):
        return apply_h(noun)
    if match_y(noun):
        return apply_y(noun)
    if match_default(noun):
        return apply_default(noun)
</programlisting>
</example>
<para>这里的好处在于 <function>plural</function> 函数现在被简化了。它以普通的方法反复使用其它地方定义的规则。获得一个匹配规则，匹配吗？调用并应用规则。规则可以在任意地方以任意方法定义，<function>plural</function> 函数对此并不关心。</para>
<para>现在，添加这个抽象过程值得吗？嗯……还不值。让我们看看如何向函数添加一个新的规则。啊哈，在先前的范例中，需要向 <function>plural</function> 函数添加一个 &if; 语句；在这个例子中，需要增加两个函数：<function>match_foo</function> 和 <function>apply_foo</function>，然后更新 <varname>rules</varname> 列表指定在什么相对位置调用这个新匹配和新规则应用。</para>
<para>这其实不过是步入下一节的一个基石。让我们继续。</para>
</section>

<section id="plural.stage3">
<?dbhtml filename="dynamic_functions/stage3.html"?>
<title>&plural_filename;, 第 3 阶段</title>
<abstract>
<title/>
<para>将每个匹配和规则应用分别制作成函数没有必要。你从来不会直接调用它们：你把它们定义于 <varname>rules</varname> 列表之中并从那里调用它们。让我们隐去它们的函数名而抓住规则定义的主线。</para>
</abstract>
<example>
<title><filename>plural3.py</filename></title>
<programlisting>
&importre;

&p3_rules; <co id="plural.stage3.1.1"/>

&p3_defplural;
&p3_for; <co id="plural.stage3.1.2"/>
&p3_if;
&p3_return;
</programlisting>
<calloutlist>
<callout arearefs="plural.stage3.1.1">
<para>这与第 2 阶段定义的规则是一样的。惟一的区别是不再定义 <function>match_sxz</function> 和 <function>apply_sxz</function> 之类的函数，而是以 <link linkend="apihelper.lambda">lambda 函数</link> 法将这些函数的内容直接 <quote>嵌入</quote> <varname>rules</varname> 列表本身。</para>
</callout>
<callout arearefs="plural.stage3.1.2">
<para>注意 <function>plural</function> 函数完全没有变化，还是反复于一系列的规则函数，检查第一个匹配规则，如果返回真则调用第二个应用规则并返回值。和前面一样，给定单词返回单词。唯一的区别是规则函数被内嵌定义，化名作 lambda 函数。但是 <function>plural</function> 函数并不在乎它们是如何定义的，只是拿到规则列表，闭着眼睛干活。</para>
</callout>
</calloutlist>
</example>
<para>现在添加一条新的规则，所有你要做的就是直接在 <varname>rules</varname> 列表之中定义函数：一个匹配规则，一个应用规则。这样内嵌的规则函数定义方法使得没必要的重复很容易被发现。你有四对函数，它们采用相同的模式。匹配函数就是调用 <function>re.search</function>，应用函数就是调用 <function>re.sub</function>。让我们提炼出这些共同点。</para>
</section>

<section id="plural.stage4">
<?dbhtml filename="dynamic_functions/stage4.html"?>
<title>&plural_filename;, 第 4 阶段</title>
<abstract>
<title/>
<para>让我们精炼出代码中的重复之处，以便更容易地定义新规则。</para>
</abstract>
<example id="plural.stage4.example.1">
<title><filename>plural4.py</filename></title>
<programlisting>
&importre;

&p4_defbuild;
&p4_match; <co id="plural.stage4.1.1"/>
&p4_apply; <co id="plural.stage4.1.2"/>
&p4_return; <co id="plural.stage4.1.3"/>
</programlisting>
<calloutlist>
<callout arearefs="plural.stage4.1.1">
<para><function>buildMatchAndApplyFunctions</function> 是一个动态生成其它函数的函数。它将 <varname>pattern</varname>，<varname>search</varname> 和 <varname>replace</varname> (实际上是一个元组，我们很快就会提到这一点)，通过使用 &lambdafunction; 语法构建一个接受单参数 (<varname>word</varname>) 并以传递给 <function>buildMatchAndApplyFunctions</function> 的 <varname>pattern</varname> 和传递给新函数的 <varname>word</varname> 调用 <function>re.search</function> 的匹配函数！哇塞！</para>
</callout>
<callout arearefs="plural.stage4.1.2">
<para>构建应用规则函数的方法相同。应用规则函数是一个接受单参数并以传递给 <function>buildMatchAndApplyFunctions</function> 的 <varname>search</varname> 和 <varname>replace</varname> 以及传递给这个应用规则函数的 <varname>word</varname> 调用 <function>re.sub</function> 的函数。在一个动态函数中应用外部参数值的技术被称作<emphasis>闭合 (closures)</emphasis>。你实际上是在应用规则函数中定义常量：它只接受一个参数 (<varname>word</varname>)，但用到了定义时设置的两个值 (<varname>search</varname> 和 <varname>replace</varname>)。</para>
</callout>
<callout arearefs="plural.stage4.1.3">
<para>最终，<function>buildMatchAndApplyFunctions</function> 函数返回一个包含两个值的元组：你刚刚创建的两个函数。你在这些函数中定义的常量 (<varname>matchFunction</varname> 中的 <varname>pattern</varname> 以及 <varname>applyFunction</varname> 中的 <varname>search</varname> 和 <varname>replace</varname>) 保留在这些函数中，由 <function>buildMatchAndApplyFunctions</function> 一同返回。这简直太酷了。</para>
</callout>
</calloutlist>
</example>
<para>如果这太费解 (它应该是这样，这是个怪异的东西)，可能需要通过了解它的使用来搞明白。</para>
<example>
<title><filename>plural4.py</filename> 继续</title>
<programlisting>
&p4_patterns; <co id="plural.stage4.2.1"/>
&p4_rules; <co id="plural.stage4.2.2"/>
</programlisting>
<calloutlist>
<callout arearefs="plural.stage4.2.1">
<para>我们的复数化规则现在被定义成一组字符串 (不是函数)。第一个字符串是你在调用 <function>re.search</function> 时使用的正则表达式；第二个和第三个字符串是你在通过调用 <function>re.sub</function> 来应用规则将名词变为复数时使用的搜索和替换表达式。</para>
</callout>
<callout arearefs="plural.stage4.2.2">
<para>这很神奇。把传进去的 <varname>patterns</varname> 字符串转换为传回来的函数。如何做到的呢？将这些字符串映射给 <function>buildMatchAndApplyFunctions</function> 函数之后，三个字符串参数转换成了两个函数组成的元组。这意味着 <varname>rules</varname> 被转换成了前面范例中相同的内容：由许多调用 <function>re.search</function> 函数的匹配函数和调用 <function>re.sub</function> 的规则应用函数构成的函数组组成的一个元组。</para>
</callout>
</calloutlist>
</example>
<para>我发誓这不是我信口雌黄：<varname>rules</varname> 被转换成了前面范例中相同的内容。剖析 <varname>rules</varname> 的定义，你看到的是：</para>
<example>
<title>剖析规则定义</title>
<programlisting>
&p3_rules;
</programlisting>
</example>
<example id="plural.finishing.up">
<title><filename>plural4.py</filename> 的完成</title>
<programlisting>
&p4_defplural;
&p4_for; <co id="plural.stage4.3.1"/>
&p4_if;
&p4_return2;
</programlisting>
<calloutlist>
<callout arearefs="plural.stage4.3.1">
<para>由于 <varname>rules</varname> 列表和前面的范例是相同的，<function>plural</function> 函数没有变化也就不令人诧异了。记住，这没什么特别的，按照顺序调用一系列函数。不必在意规则是如何定义的。在<link linkend="plural.stage2">第 2 阶段</link>，它们被定义为各具名称的函数。在<link linkend="plural.stage3">第 3 阶段</link>，他们被定义为匿名的 &lambdafunction; 函数。现在第 4 阶段，它们通过 <function>buildMatchAndApplyFunctions</function> 映射原始的字符串列表被动态创建。无所谓，<function>plural</function> 函数的工作方法没有变。</para>
</callout>
</calloutlist>
</example>
<para>还不够兴奋吧！我必须承认，在定义 <function>buildMatchAndApplyFunctions</function> 时我跳过了一个微妙之处。让我们回过头再看一下。</para>
<example>
<title>回头看 <function>buildMatchAndApplyFunctions</function></title>
<programlisting>
&p4_defbuild; <co id="plural.stage4.4.1"/>
</programlisting>
<calloutlist>
<callout arearefs="plural.stage4.4.1">
<para>注意到双括号了吗？这个函数并不是真的接受三个参数，实际上只接受一个参数：一个三元素元组。但是在函数被调用时元组被展开了，元组的三个元素也被赋予了不同的变量：<varname>pattern</varname>, <varname>search</varname> 和 <varname>replace</varname>。乱吗？让我们在使用中理解。</para>
</callout>
</calloutlist>
</example>
<example>
<title>调用函数时展开元组</title>
<screen>
&prompt;<userinput>def foo((a, b, c)):</userinput>
&continuationprompt;<userinput>print c</userinput>
&continuationprompt;<userinput>print b</userinput>
&continuationprompt;<userinput>print a</userinput>
&prompt;<userinput>parameters = ('apple', 'bear', 'catnap')</userinput>
&prompt;<userinput>foo(parameters)</userinput> <co id="plural.stage4.5.1"/>
<computeroutput>catnap</computeroutput>
<computeroutput>bear</computeroutput>
<computeroutput>apple</computeroutput>
</screen>
<calloutlist>
<callout arearefs="plural.stage4.5.1">
<para>调用 <function>foo</function> 的正确方法是使用一个三元素元组。函数被调用时，元素被分别赋予 <function>foo</function> 中的多个局部变量。</para>
</callout>
</calloutlist>
<para>现在，让我们回过头看一看这个元组自动展开技巧的必要性。<varname>patterns</varname> 是一个元组列表，并且每个元组都有三个元素。调用 <literal>map(buildMatchAndApplyFunctions, patterns)</literal>，这并<emphasis>不</emphasis> 意味着是以三个参数调用 <function>buildMatchAndApplyFunctions</function>。使用 <function>map</function> 映射一个列表到函数时，通常使用单参数：列表中的每个元素。就 <varname>patterns</varname> 而言，列表的每个元素都是一个元组，所以 <function>buildMatchAndApplyFunctions</function> 总是是以元组来调用，在 <function>buildMatchAndApplyFunctions</function> 中使用元组自动展开技巧将元素赋值给可以被使用的变量。</para>
</example>
</section>

<section id="plural.stage5">
<?dbhtml filename="dynamic_functions/stage5.html"?>
<title>&plural_filename;, 第 5 阶段</title>
<abstract>
<title/>
<para>你已经精炼了所有重复代码，也尽可能地把复数规则提炼到定义一个字符串列表。接下来的步骤是把这些字符串提出来放在另外的文件中，从而可以和使用它们的代码分开来维护。</para>
</abstract>
<para>首先，让我们建立一个包含你需要的所有规则的文本文件。没有什么特别的结构，不过是以空格 (或者制表符) 把字符串列成三列。你把它命名为 <filename>rules.en</filename>，<quote>en</quote> 是英语的意思。这些是英语名词复数的规则，你以后可以为其它语言添加规则文件。</para>
<example>
<title><filename>rules.en</filename></title>
<programlisting>
[sxz]$                  $               es
[^aeioudgkprt]h$        $               es
[^aeiou]y$              y$              ies
$                       $               s
</programlisting>
</example>
<para>现在来看看如何使用规则文件。</para>
<example>
<title><filename>plural5.py</filename></title>
<programlisting>
&importre;
&p5_import;

&p5_defbuild;
&p5_return; <co id="plural.stage5.1.1"/>

&p5_defplural; <co id="plural.stage5.1.2"/>
&p5_lines; <co id="plural.stage5.1.3"/>
&p5_patterns; <co id="plural.stage5.1.4"/>
&p5_rules; <co id="plural.stage5.1.5"/>
&p5_for;
&p5_apply; <co id="plural.stage5.1.6"/>
&p5_if;
</programlisting>
<calloutlist>
<callout arearefs="plural.stage5.1.1">
<para>在这里你还将使用闭合技术 (动态构建函数时使用函数外部定义的变量)，但是现在你把原来分开的匹配函数和规则应用函数合二为一 (你将在下一节中明了其原因)。你很快会看到，这与分别调用两个函数效果相同，只是调用的方法稍有不同。</para>
</callout>
<callout arearefs="plural.stage5.1.2">
<para>咱们的 <function>plural</function> 函数现在接受的第二个参数是默认值为 <literal>en</literal> 的可选参数 <varname>language</varname>。</para>
</callout>
<callout arearefs="plural.stage5.1.3">
<para>你使用 <varname>language</varname> 参数命名一个文件，打开这个文件并读取其中的内容到一个列表。如果 <varname>language</varname> 是 <literal>en</literal>，那么你将打开 <filename>rules.en</filename> 文件，读取全部内容，以其中的回车符作为分隔构建一个列表。文件的每一行将成为列表的一个元素。</para>
</callout>
<callout arearefs="plural.stage5.1.4">
<para>如你所见，文件的每一行都有三个值，但是它们是以空白字符 (制表符或者空格符，这没什么区别) 分割。用 <function>string.split</function> 函数映射列表来创建一个每个元素都是三元素元组的新列表。因此，像 <literal>[sxz]$ $ es</literal> 这样的一行将被打碎并放入 <literal>('[sxz]$', '$', 'es')</literal> 这样的元组。这意味着 <varname>patterns</varname> 将最终变成元组列表的形式，就像<link linkend="plural.stage4">第 4 阶段</link>实打实编写的那样。</para>
</callout>
<callout arearefs="plural.stage5.1.5">
<para>如果 <varname>patterns</varname> 是一个元组列表，那么 <varname>rules</varname> 就可以通过一个个调用 <function>buildRule</function> 动态地生成函数列表。调用 <function>buildRule(('[sxz]$', '$', 'es'))</function> 返回一个接受单参数 <varname>word</varname> 的函数。当返回的函数被调用，则将执行 <literal>re.search('[sxz]$', word) and re.sub('$', 'es', word)</literal>。</para>
</callout>
<callout arearefs="plural.stage5.1.6">
<para>因为你现在构建的是一个匹配和规则应用合一的函数，你需要分别调用它们。仅仅是调用函数，如果返回了内容，那么返回的便是复数；如果没有返回 (也就是返回了&none;)，那么该规则未能匹配，就应该尝试其他规则。</para>
</callout>
</calloutlist>
</example>
<para>这里的进步是你把复数规则完全分离到另外的文件中。不但这个文件可以独立于代码单独维护，而且你建立了一个命名规划使 <function>plural</function> 函数可以根据 <varname>language</varname> 参数使用不同的规则文件。</para>

<para>这里的缺陷是每次调用 <function>plural</function> 函数都需要去读取一次文件。我想我可以在整本书中都不使用 <quote>留给读者去练习</quote>，但是这里：为特定的语言规则文件建立一个缓存机制，并在调用期间规则文件改变时自动刷新<emphasis>留给读者作为练习</emphasis>。祝你顺利。</para>
</section>

<section id="plural.stage6">
<?dbhtml filename="dynamic_functions/stage6.html"?>
<title>&plural_filename;, 第 6 阶段</title>
<abstract>
<title/>
<para>现在你已准备好探讨生成器 (Generator) 了。</para>
</abstract>
<example>
<title><filename>plural6.py</filename></title>
<programlisting>
&importre;

&p6_defrules;
&p6_forline;
&p6_split;
&p6_yield;

&p6_defplural;
&p6_for;
&p6_apply;
&p6_return;
</programlisting>
</example>
<para>这里使用了被称作生成器的技术，我不打算在你看过一个简单例子之前试图解释它。</para>
<example id="plural.introducing.generators">
<title>介绍生成器</title>
<screen>
&prompt;<userinput>def make_counter(x):</userinput>
&continuationprompt;<userinput>print 'entering make_counter'</userinput>
&continuationprompt;<userinput>while 1:</userinput>
&continuationprompt;<userinput>    yield x</userinput>               <co id="plural.stage6.2.1"/>
&continuationprompt;<userinput>    print 'incrementing x'</userinput>
&continuationprompt;<userinput>    x = x + 1</userinput>
&continuationprompt;
&prompt;<userinput>counter = make_counter(2)</userinput> <co id="plural.stage6.2.2"/>
&prompt;<userinput>counter</userinput>                   <co id="plural.stage6.2.3"/>
<computeroutput>&lt;generator object at 0x001C9C10></computeroutput>
&prompt;<userinput>counter.next()</userinput>            <co id="plural.stage6.2.4"/>
<computeroutput>entering make_counter
2</computeroutput>
&prompt;<userinput>counter.next()</userinput>            <co id="plural.stage6.2.5"/>
<computeroutput>incrementing x
3</computeroutput>
&prompt;<userinput>counter.next()</userinput>            <co id="plural.stage6.2.6"/>
<computeroutput>incrementing x
4</computeroutput>
</screen>
<calloutlist>
<callout arearefs="plural.stage6.2.1">
<para><function>make_counter</function> 中出现关键字 &yield; 意味着这不是一个普通的函数。它是一种每次生成一个值的特殊函数。你可以把它看成是一个可恢复函数。调用它会返回一个生成器，它可以返回 <varname>x</varname> 的连续值。</para>
</callout>
<callout arearefs="plural.stage6.2.2">
<para>想要创建一个 <function>make_counter</function> 生成器的实例，只要像其它函数一样调用。注意这并没有真正执行函数代码。你可以分辨出这一点，因为 <function>make_counter</function> 的第一行是 &print; 语句，然而没有任何内容输出。</para>
</callout>
<callout arearefs="plural.stage6.2.3">
<para><function>make_counter</function> 函数返回一个生成器对象。</para>
</callout>
<callout arearefs="plural.stage6.2.4">
<para>你第一次调用生成器对象的 <function>next()</function> 方法，将执行 <function>make_counter</function> 中的代码执行到第一个 &yield; 语句，然后返回生产 (yield) 出来的值。在本例中，这个值是 <literal>2</literal>，因为你是通过 <function>make_counter(2)</function> 来创建最初的生成器的。</para>
</callout>
<callout arearefs="plural.stage6.2.5">
<para>不断调用生成器对象的 <function>next()</function> <emphasis>将从你上次离开的位置重新开始</emphasis> 并继续下去直到你又一次遇到 &yield; 语句。接下来执行 &print; 语句来打印 <literal>incrementing x</literal>，然后执行 <literal>x = x + 1</literal> 语句来真正地增加。然后你进入 &while; 的又一次循环，你所做的第一件事是 <literal>yield x</literal>，返回目前的 <varname>x</varname> 值 (现在是3)。</para>
</callout>
<callout arearefs="plural.stage6.2.6">
<para>第二次你调用 <function>counter.next()</function> 时，你又做一遍相同的事情，但是这次 <varname>x</varname> 是
 <literal>4</literal>。如此继续。因为 <function>make_counter</function> 设置的是一个无限循环，理论上你可以永远这样继续下去，不断地递增并弹出 <varname>x</varname> 值。现在让我们看看生成器更具意义的应用。</para>
</callout>
</calloutlist>
</example>
<example id="plural.fib.example">
<title>使用生成器替代递归</title>
<programlisting>
def fibonacci(max):
    a, b = 0, 1       <co id="plural.stage6.3.1"/>
    while a &lt; max:
        yield a       <co id="plural.stage6.3.2"/>
        a, b = b, a+b <co id="plural.stage6.3.3"/>
</programlisting>
<calloutlist>
<callout arearefs="plural.stage6.3.1">
<para>斐波纳契数列 (Fibonacci sequence) 是每个数都是前面两个数值和的一个数列。它从 &zero; 和 &one; 开始，开始增长得很慢，但越来越快。开始这个数列你需要两个变量：<varname>a</varname> 从 &zero;开始，<varname>b</varname> 从 &one; 开始。</para>
</callout>
<callout arearefs="plural.stage6.3.2">
<para><varname>a</varname> 是数列的当前值，弹出它。</para>
</callout>
<callout arearefs="plural.stage6.3.3">
<para><varname>b</varname> 是数列的下一个数，把它赋值给 <varname>a</varname>，同时计算出 (<literal>a+b</literal>) 并赋值给 <varname>b</varname> 放在一边稍后使用。注意这是并行发生的，如果 <varname>a</varname> 是 <literal>3</literal>，<varname>b</varname> 是 <literal>5</literal>，那么 <literal>a, b = b, a+b</literal> 将会设置 <varname>a</varname> 为 <literal>5</literal> (<varname>b</varname> 的原值)，<varname>b</varname> 为 <literal>8</literal> (<varname>a</varname> 和 <varname>b</varname> 之和)。</para>
</callout>
</calloutlist>
</example>
<para>这样你就有了生成连续的 Fibonacci 数的函数了。当然你也可以通过递归做到，但是这里的方法更加易读。并且也与 &for; 工作得很好。</para>
<example>
<title>&for; 循环中的生成器</title>
<screen>
&prompt;<userinput>for n in fibonacci(1000):</userinput> <co id="plural.stage6.4.1"/>
&continuationprompt;<userinput>print n,</userinput>              <co id="plural.stage6.4.2"/>
<computeroutput>0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987</computeroutput>
</screen>
<calloutlist>
<callout arearefs="plural.stage6.4.1">
<para>你可以在 &for; 循环中直接使用 <function>fibonacci</function> 这样的生成器。&for; 循环将会创建一个生成器对象并连续调用其 <function>next()</function> 方法获得值并赋予 &for; 循环变量 (<varname>n</varname>)。</para>
</callout>
<callout arearefs="plural.stage6.4.2">
<para>每轮 &for; 循环 <varname>n</varname> 都从 <function>fibonacci</function> 的 &yield; 语句获得一个新的值。当 <function>fibonacci</function> 超出数字限定 (<varname>a</varname> 超过 <varname>max</varname>，你在这里限定的是 <literal>1000</literal>) 很自然地退出 &for; 循环。</para>
</callout>
</calloutlist>
</example>
<para>好了，让我们回到 <function>plural</function> 函数看看如何可以把它用起来。</para>
<example>
<title>生成器生成动态函数</title>
<programlisting>
&p6_defrules;
&p6_forline; <co id="plural.stage6.5.1"/>
&p6_split; <co id="plural.stage6.5.2"/>
&p6_yield; <co id="plural.stage6.5.3"/>

&p6_defplural;
&p6_for; <co id="plural.stage6.5.4"/>
&p6_apply;
&p6_return;
</programlisting>
<calloutlist>
<callout arearefs="plural.stage6.5.1">
<para><literal>for line in file(...)</literal> 是从文件中一行行读取的通用方法，每次一行。它能正常工作是因为 <emphasis><function>file</function> 实际上返回一个生成器</emphasis>，它的 <function>next()</function> 方法返回文件中的下一行。简直太酷了，光是想想就让我满头大汗。</para>
</callout>
<callout arearefs="plural.stage6.5.2">
<para>这没有什么神奇之处。还记得规则文件的每一行都用空白分开三个值吗？所以 <literal>line.split()</literal> 返回一个三元素元组，你把这些值赋给了 3 个局部变量。</para>
</callout>
<callout arearefs="plural.stage6.5.3">
<para><emphasis>然后你不断地弹出。</emphasis> 你弹出什么呢？一个使用 &lambdafunction; 动态生成的函数，而这个函数实际上是一个闭合 (把本地变量 <varname>pattern</varname>，<varname>search</varname> 和 <varname>replace</varname> 作为常量)。换句话说，<function>rules</function> 是一个弹出规则函数的生成器。</para>
</callout>
<callout arearefs="plural.stage6.5.4">
<para>既然 <function>rules</function> 是一个生成器，你就可以在 &for; 循环中直接使用它。&for; 循环的第一轮你调用 <function>rules</function> 函数，打开规则文件，读取第一行，动态构建一个根据规则文件第一行匹配并应用规则的函数。&for; 循环的第二轮将会从上一轮 <function>rules</function> 中停下的位置 (<literal>for line in file(...)</literal> 循环内部) 读取规则文件的第二行，动态构建根据规则文件第二行匹配并应用规则的另一个函数。如此继续下去。</para>
</callout>
</calloutlist>
</example>
<para>你在<link linkend="plural.stage5">第 5 阶段</link>得到的是什么？第 5 阶段中，你读取整个规则文件并在使用第一条规则之前构建一个所有规则组成的列表。现在有了生成器，你可以更舒适地做到这一切：你打开并读取第一条规则，根据它创建函数并使用之，如果它适用则根本不去读取规则文件剩下的内容，也不去建立另外的函数。</para>
<itemizedlist role="furtherreading">
<title>进一步阅读</title>
<listitem><para><ulink url="http://www.python.org/peps/pep-0255.html">PEP 255</ulink> 定义生成器。</para></listitem>
<listitem><para>&pythoncookbook; 有<ulink url="http://www.google.com/search?q=generators+cookbook+site:aspn.activestate.com">生成器的例子</ulink>。</para></listitem>
</itemizedlist>
</section>

<section id="plural.summary">
<?dbhtml filename="dynamic_functions/summary.html"?>
<title>小结</title>
<abstract>
<title/>
<para>这一章中我们探讨了几个不同的高级技术。它们并不都适用于任何情况。</para>
</abstract>
<para>你现在应该能自如应用如下技术：</para>
<itemizedlist>
<listitem><para>应用<link linkend="plural.stage1">正则表达式进行字符串替换</link>。</para></listitem>
<listitem><para>将<link linkend="plural.stage2">函数当作对象</link>，把它们存于列表中，把它们赋值给变量，并通过变量来调用它们。</para></listitem>
<listitem><para>构建<link linkend="plural.stage3">应用 &lambdafunction; 的动态函数</link>。</para></listitem>
<listitem><para>构建<link linkend="plural.stage4">闭合</link>，将外部变量作为常量构建动态函数。</para></listitem>
<listitem><para>构建<link linkend="plural.stage6">生成器</link>，进行逻辑递增操作并在每次调用时返回不同值的恢复执行函数。</para></listitem>
</itemizedlist>
<para>抽象化，动态构建函数，构建闭合以及应用生成器能够使你的代码更加简单化、可读化、灵活化。你需要在简洁和功能实现两方面进行平衡。</para>
</section>
</chapter>

<!--
- Case study: pluralizing nouns
  - Examples:
    if re.search('[sxz]$', noun, re.IGNORECASE):
      result = re.sub('$', 'es', noun)
    elif re.search('[^aeioudgkprt]h$', noun, re.IGNORECASE):
      result = re.sub('$', 'es', noun)
    elif re.search('[^aeiou]y$', noun, re.IGNORECASE):
      result = re.sub('y$', 'ies', noun)
    else:
      result = noun + 's'
  - Search flags (re.IGNORECASE)
  - Patterns:
    [] single-character or
    ^  not
  - maybe do this in stages, like roman chapter
  - store each stage's code in common/py/plural/
  - each stage can just use the three "common" rules (SXZ, hard H, and Y to IES)
  - stage 1
    - code plural.py as series of 'if' statements
  - stage 2
    - abstract what's the same about each if statement
    - look at it as "if matchesRule(noun): noun = applyRule(noun)"
    - code plural.py as series of match functions and pluralize functions
  - stage 3
    - redefine match and apply functions inline
    - make a single function that takes a noun and returns whether it matches a hardcoded rule
      matchesYtoIESrule = re.compile('y$', re.IGNORECASE).search
    - use lambda to make a single function that takes a noun and returns its plural, based on a hardcoded rule
      applyYtoIESrule = lambda noun: re.sub('y$', 'ies', noun, re.IGNORECASE)
    - Now you can use a series of if statements like this:
      if matchesYtoIESrule(noun): result = applyYtoIESrule(noun)
  - stage 4
    - Define the rules as a tuple of functions, and iterate through them
      rules = ((matchesYtoIESrule, applyYtoIESrule), ...)
      for matchesRule, applyRule in rules:
        if matchesRule(noun):
          result = applyRule(noun)
          break
  - stage 5
    - Abstract what's similar about each function (re.search, re.sub)
    - (more here)
  - stage 6
    - makeMatchAndApply
-->
