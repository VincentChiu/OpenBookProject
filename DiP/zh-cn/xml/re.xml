<?xml version="1.0" encoding="utf-8"?>
<chapter id="re">
<?dbhtml filename="regular_expressions/index.html"?>
<title>正则表达式</title>
<titleabbrev id="re.numberonly">第 7 章</titleabbrev>
<abstract>
<title/>
<para>正则表达式是搜索、替换和解析复杂字符模式的一种强大而标准的方法。如果你曾经在其他语言 (如 &perl;) 中使用过它，由于它们的语法非常相似，你仅仅阅读一下 &re; 模块的摘要，大致了解其中可用的函数和参数就可以了。</para>
</abstract>
<section id="re.intro">
<title>概览</title>
<para>字符串也有很多方法，可以进行搜索 (<function>index</function>、<function>find</function> 和 <function>count</function>)、替换 (<function>replace</function>) 和解析 (<function>split</function>)，但它们仅限于处理最简单的情况。搜索方法查找单个和固定编码的子串，并且它们总是大小写敏感的。对一个字符串<varname>s</varname>，如果要进行大小写不敏感的搜索，则你必须调用 <function>s.lower()</function> 或 <function>s.upper()</function> 将 <varname>s</varname> 转换成全小写或者全大写，然后确保搜索串有着相匹配的大小写。<function>replace</function> 和 <function>split</function>方法有着类似的限制。</para>
<abstract>
<title/>
<para>如果你要解决的问题利用字符串函数能够完成，你应该使用它们。它们快速、简单且容易阅读，而快速、简单、可读性强的代码可以说出很多好处。但是，如果你发现你使用了许多不同的字符串函数和 &if; 语句来处理一个特殊情况，或者你组合使用了 &split;、&join; 等函数而导致用一种奇怪的甚至读不下去的方式理解列表，此时，你也许需要转到正则表达式了。</para>
</abstract>
<para>尽管正则表达式语法较之普通代码相对麻烦一些，但是却可以得到更可读的结果，与用一长串字符串函数的解决方案相比要好很多。在正则表达式内部有多种方法嵌入注释，从而使之具有自文档化 (self-documenting) 的能力。</para>
</section>
<section id="re.matching">
<?dbhtml filename="regular_expressions/street_addresses.html"?>
<title>个案研究：街道地址</title>
<abstract>
<title/>
<para>这一系列的例子是由我几年前日常工作中的现实问题启发而来的，当时我需要从一个老化系统中导出街道地址，在将它们导入新的系统之前，进行清理和标准化。(看，我不是只将这些东西堆到一起，它有实际的用处。)这个例子展示我如何处理这个问题。</para>
</abstract>
<example>
<title>在字符串的结尾匹配</title>
<screen>
&prompt;<userinput>s = '100 NORTH MAIN ROAD'</userinput>
&prompt;<userinput>s.replace('ROAD', 'RD.')</userinput>               <co id="re.matching.1.1"/>
<computeroutput>'100 NORTH MAIN RD.'</computeroutput>
&prompt;<userinput>s = '100 NORTH BROAD ROAD'</userinput>
&prompt;<userinput>s.replace('ROAD', 'RD.')</userinput>               <co id="re.matching.1.2"/>
<computeroutput>'100 NORTH BRD. RD.'</computeroutput>
&prompt;<userinput>s[:-4] + s[-4:].replace('ROAD', 'RD.')</userinput> <co id="re.matching.1.3"/>
<computeroutput>'100 NORTH BROAD RD.'</computeroutput>
&prompt;<userinput>import re</userinput>                              <co id="re.matching.1.4"/>
&prompt;<userinput>re.sub('ROAD$', 'RD.', s)</userinput>              <co id="re.matching.1.5"/> <co id="re.matching.1.6"/>
<computeroutput>'100 NORTH BROAD RD.'</computeroutput></screen>
<calloutlist>
<callout arearefs="re.matching.1.1">
<para>我的目标是将街道地址标准化，<literal>'ROAD'</literal> 通常被略写为 <literal>'RD.'</literal>。乍看起来，我以为这个太简单了，只用字符串的方法 <function>replace</function> 就可以了。毕竟，所有的数据都已经是大写的了，因此大小写不匹配将不是问题。并且，要搜索的串<literal>'ROAD'</literal>是一个常量，在这个迷惑的简单例子中，<function>s.replace</function> 的确能够胜任。</para>
</callout>
<callout arearefs="re.matching.1.2">
<para>不幸的是，生活充满了特例，并且我很快就意识到这个问题。比如：<literal>'ROAD'</literal> 在地址中出现两次，一次是作为街道名称 <literal>'BROAD'</literal> 的一部分，一次是作为 <literal>'ROAD'</literal> 本身。<function>replace</function> 方法遇到这两处的<literal>'ROAD'</literal>并没有区别，因此都进行了替换，而我发现地址被破坏掉了。</para>
</callout>
<callout arearefs="re.matching.1.3">
<para>为了解决在地址中出现多次<literal>'ROAD'</literal>子串的问题，有可能采用类似这样的方法：只在地址的最后四个字符中搜索替换 <literal>'ROAD'</literal> (s[-4:])，忽略字符串的其他部分 (s[:-4])。但是，你可能发现这已经变得不方便了。例如，该模式依赖于你要替换的字符串的长度了 (如果你要把 <literal>'STREET'</literal> 替换为 <literal>'ST.'</literal>，你需要利用 <literal>s[:-6]</literal> 和 <literal>s[-6:].replace(...)</literal>)。你愿意在六月个期间回来调试它们么？我本人是不愿意的。</para>
</callout>
<callout arearefs="re.matching.1.4">
<para>是时候转到正则表达式了。在 &python; 中，所有和正则表达式相关的功能都包含在 &re; 模块中。</para>
</callout>
<callout arearefs="re.matching.1.5">
<para>来看第一个参数：<literal>'ROAD$'</literal>。这个正则表达式非常简单，只有当 <literal>'ROAD'</literal> 出现在一个字符串的尾部时才会匹配。字符<literal>$</literal>表示“字符串的末尾”(还有一个对应的字符，尖号<literal>^</literal>，表示“字符串的开始”)。</para>
</callout>
<callout arearefs="re.matching.1.6">
<para>利用 <function>re.sub</function> 函数，对字符串 <varname>s</varname> 进行搜索，满足正则表达式 <literal>'ROAD$'</literal> 的用 <literal>'RD.'</literal> 替换。这样将匹配字符串 <varname>s</varname> 末尾的 <literal>'ROAD'</literal>，而不会匹配属于单词 <literal>'ROAD'</literal> 一部分的 <literal>'ROAD'</literal>，这是因为它是出现在 <varname>s</varname> 的中间。</para>
</callout>
</calloutlist>
</example>
<para>继续我的清理地址的故事。很快我发现，在上面的例子中，仅仅匹配地址末尾的 <literal>'ROAD'</literal> 不是很好，因为不是所有的地址都包括表示街道的单词 (<literal>'ROAD'</literal>)；有一些直接以街道名结尾。大部分情况下，不会遇到这种情况，但是，如果街道名称为 <literal>'BROAD'</literal>，那么正则表达式将会匹配 <literal>'BROAD'</literal> 的一部分为 <literal>'ROAD'</literal>，而这并不是我想要的。</para>
<example>
<title>匹配整个单词</title>
<screen>
&prompt;<userinput>s = '100 BROAD'</userinput>
&prompt;<userinput>re.sub('ROAD$', 'RD.', s)</userinput>
<computeroutput>'100 BRD.'</computeroutput>
&prompt;<userinput>re.sub('\\bROAD$', 'RD.', s)</userinput>  <co id="re.matching.2.2"/>
<computeroutput>'100 BROAD'</computeroutput>
&prompt;<userinput>re.sub(r'\bROAD$', 'RD.', s)</userinput>  <co id="re.matching.2.3"/>
<computeroutput>'100 BROAD'</computeroutput>
&prompt;<userinput>s = '100 BROAD ROAD APT. 3'</userinput>
&prompt;<userinput>re.sub(r'\bROAD$', 'RD.', s)</userinput>  <co id="re.matching.2.4"/>
<computeroutput>'100 BROAD ROAD APT. 3'</computeroutput>
&prompt;<userinput>re.sub(r'\bROAD\b', 'RD.', s)</userinput> <co id="re.matching.2.5"/>
<computeroutput>'100 BROAD RD. APT 3'</computeroutput></screen>
<calloutlist>
<callout arearefs="re.matching.2.2">
<para>我真正想要做的是，当 <literal>'ROAD'</literal> 出现在字符串的末尾，并且是作为一个独立的单词时，而不是一些长单词的一部分，才对他进行匹配。为了在正则表达式中表达这个意思，你利用 <literal>\b</literal>，它的含义是“单词的边界必须在这里”。在 &python; 中，由于字符 <literal>'\'</literal> 在一个字符串中必须转义，这会变得非常麻烦。有时候，这类问题被称为“反斜线灾难”，这也是 &perl; 中正则表达式比 &python; 的正则表达式要相对容易的原因之一。另一方面，&perl; 也混淆了正则表达式和其他语法，因此，如果你发现一个 bug，很难弄清楚究竟是一个语法错误，还是一个正则表达式错误。</para>
</callout>
<callout arearefs="re.matching.2.3">
<para>为了避免反斜线灾难，你可以利用所谓的“原始字符串”，只要为字符串添加一个前缀 <literal>r</literal> 就可以了。这将告诉 &python;，字符串中的所有字符都不转义；<literal>'\t'</literal> 是一个制表符，而 <literal>r'\t'</literal> 是一个真正的反斜线字符 <literal>'\'</literal>，紧跟着一个字母 <literal>'t'</literal>。我推荐只要处理正则表达式，就使用原始字符串；否则，事情会很快变得混乱 (并且正则表达式自己也会很快被自己搞乱了)。</para>
</callout>
<callout arearefs="re.matching.2.4">
<para>(一声叹息) 很不幸，我很快发现更多的与我的逻辑相矛盾的例子。在这个例子中，街道地址包含有作为整个单词的<literal>'ROAD'</literal>，但是它不是在末尾，因为地址在街道命名后会有一个房间号。由于 <literal>'ROAD'</literal> 不是在每一个字符串的末尾，没有匹配上，因此调用 <function>re.sub</function> 没有替换任何东西，你获得的只是初始字符串，这也不是我们想要的。</para>
</callout>
<callout arearefs="re.matching.2.5">
<para>为了解决这个问题，我去掉了 <literal>$</literal> 字符，加上另一个 <literal>\b</literal>。现在，正则表达式<quote>匹配字符串中作为整个单词出现的<literal>'ROAD'</literal></quote>了，不论是在末尾、开始还是中间。</para>
</callout>
</calloutlist>
</example>
</section>
<section id="re.roman">
<?dbhtml filename="regular_expressions/roman_numerals.html"?>
<title>个案研究：罗马字母</title>
<abstract>
<title/>
<para>你可能经常看到罗马数字，即使你没有意识到它们。你可能曾经在老电影或者电视中看到它们 (<quote>版权所有 <literal>MCMXLVI</literal></quote> 而不是 <quote>版权所有<literal>1946</literal></quote>)，或者在某图书馆或某大学的贡献墙上看到它们 (<quote>成立于 <literal>MDCCCLXXXVIII</literal></quote>而不是<quote>成立于<literal>1888</literal></quote>)。你也可能在某些文献的大纲或者目录上看到它们。这是一个表示数字的系统，它实际上能够追溯到远古的罗马帝国 (因此而得名)。</para>
</abstract>
<para>在罗马数字中，利用7个不同字母进行重复或者组合来表达各式各样的数字。</para>
<itemizedlist>
<listitem><para><literal>I</literal> = <literal>1</literal></para></listitem>
<listitem><para><literal>V</literal> = <literal>5</literal></para></listitem>
<listitem><para><literal>X</literal> = <literal>10</literal></para></listitem>
<listitem><para><literal>L</literal> = <literal>50</literal></para></listitem>
<listitem><para><literal>C</literal> = <literal>100</literal></para></listitem>
<listitem><para><literal>D</literal> = <literal>500</literal></para></listitem>
<listitem><para><literal>M</literal> = <literal>1000</literal></para></listitem>
</itemizedlist>
<para>下面是关于构造罗马数字的一些通用的规则的介绍：</para>
<itemizedlist>
<listitem><para>字符是叠加的。<literal>I</literal> 表示 &one;，<literal>II</literal> 表示 <literal>2</literal>，而 <literal>III</literal> 表示 <literal>3</literal>。<literal>VI</literal> 表示 <literal>6</literal> (字面上为逐字符相加，<quote><literal>5</literal> 加 <literal>1</literal></quote>)，<literal>VII</literal> 表示 <literal>7</literal>，<literal>VIII</literal> 表示 <literal>8</literal>。</para></listitem>
<listitem><para>含十字符 (<literal>I</literal>、<literal>X</literal>、<literal>C</literal> 和 <literal>M</literal>) 至多可以重复三次。对于 <literal>4</literal>，你则需要利用下一个最大的含五字符进行减操作得到：你不能把 <literal>4</literal> 表示成 <literal>IIII</literal>，而应表示为 <literal>IV</literal> (<quote>比 <literal>5</literal> 小 <literal>1</literal></quote>)。数字 <literal>40</literal> 写成 <literal>XL</literal> (比 <literal>50</literal> 小 <literal>10</literal>)，<literal>41</literal> 写成 <literal>XLI</literal>，<literal>42</literal> 写成 <literal>XLII</literal>，<literal>43</literal> 写成 <literal>XLIII</literal>，而 <literal>44</literal> 写成 <literal>XLIV</literal> (比 <literal>50</literal> 小 <literal>10</literal>，然后比 <literal>5</literal> 小<literal>1</literal>)。</para></listitem>
<listitem><para>类似地，对于数字 <literal>9</literal>，你必须利用下一个含十字符进行减操作得到：<literal>8</literal> 表示为 <literal>VIII</literal>，而 <literal>9</literal> 则表示为 <literal>IX</literal> (比 <literal>10</literal> 小 <literal>1</literal>)，而不是 <literal>VIIII</literal> (因为字符 <literal>I</literal> 不能连续重复四次)。数字 <literal>90</literal> 表示为 <literal>XC</literal>，<literal>900</literal> 表示为 <literal>CM</literal>。</para></listitem>
<listitem><para>含五字符不能重复。数字 <literal>10</literal> 常表示为<literal>X</literal>，而从来不用<literal>VV</literal>来表示。数字 <literal>100</literal> 常表示为<literal>C</literal>，也从来不表示为 <literal>LL</literal>。</para></listitem>
<listitem><para>罗马数字一般从高位到低位书写，从左到右阅读，因此不同顺序的字符意义大不相同。<literal>DC</literal> 表示 <literal>600</literal>；而 <literal>CD</literal> 是一个完全不同的数字 (为 <literal>400</literal>，也就是比 <literal>500</literal> 小<literal>100</literal>)。<literal>CI</literal> 表示 <literal>101</literal>；而<literal>IC</literal> 甚至不是一个合法的罗马字母 (因为你不能直接从数字<literal>100</literal>减去<literal>1</literal>；这需要写成 <literal>XCIX</literal>，意思是比 <literal>100</literal> 小 <literal>10</literal>，然后加上数字 <literal>9</literal>，也就是比 <literal>10</literal> 小 <literal>1</literal>的数字)。</para></listitem>
</itemizedlist>
<section>
<title>校验千位数</title>
<para>怎样校验任意一个字符串是否为一个有效的罗马数字呢？我们每次只看一位数字，由于罗马数字一般是从高位到低位书写。我们从高位开始：千位。对于大于或等于 1000 的数字，千位由一系列的字符 <literal>M</literal> 表示。</para>
<example>
<title>校验千位数</title>
<screen>
&prompt;<userinput>import re</userinput>
&prompt;<userinput>pattern = '^M?M?M?$'</userinput>       <co id="re.roman.1.1"/>
&prompt;<userinput>re.search(pattern, 'M')</userinput>    <co id="re.roman.1.2"/>
<computeroutput>&lt;SRE_Match object at 0106FB58></computeroutput>
&prompt;<userinput>re.search(pattern, 'MM')</userinput>   <co id="re.roman.1.3"/>
<computeroutput>&lt;SRE_Match object at 0106C290></computeroutput>
&prompt;<userinput>re.search(pattern, 'MMM')</userinput>  <co id="re.roman.1.4"/>
<computeroutput>&lt;SRE_Match object at 0106AA38></computeroutput>
&prompt;<userinput>re.search(pattern, 'MMMM')</userinput> <co id="re.roman.1.5"/>
&prompt;<userinput>re.search(pattern, '')</userinput>     <co id="re.roman.1.6"/>
<computeroutput>&lt;SRE_Match object at 0106F4A8></computeroutput></screen>
<calloutlist>
<callout arearefs="re.roman.1.1">
<para>这个模式有三部分：</para>
<itemizedlist>
<listitem><para><literal>^</literal> 表示仅在一个字符串的开始匹配其后的字符串内容。如果没有这个字符，这个模式将匹配出现在字符串任意位置上的
<literal>M</literal>，而这并不是你想要的。你想确认的是：字符串中是否出现字符 <literal>M</literal>，如果出现，则必须是在字符串的开始。</para></listitem>
<listitem><para><literal>M?</literal> 可选地匹配单个字符 <literal>M</literal>，由于它最多可重复出现三次，你可以在一行中匹配 0 次到 3 次字符 <literal>M</literal>。</para></listitem>
<listitem><para><literal>$</literal> 字符限制模式只能够在一个字符串的结尾匹配。当和模式开头的字符 <literal>^</literal> 结合使用时，这意味着模式必须匹配整个串，并且在在字符 <literal>M</literal> 的前后都不能够出现其他的任意字符。</para></listitem>
</itemizedlist>
</callout>
<callout arearefs="re.roman.1.2">
<para>&re; 模块的关键是一个 &search; 函数，该函数有两个参数，一个是正则表达式 (<varname>pattern</varname>)，一个是字符串  (<literal>'M'</literal>)，函数试图匹配正则表达式。如果发现一个匹配，&search; 函数返回一个拥有多种方法可以描述这个匹配的对象，如果没有发现匹配，&search; 函数返回一个 &none;，一个 &python; 空值 (null value)。你此刻关注的唯一事情，就是模式是否匹配上，于是我们利用 &search; 函数的返回值了解这个事实。字符串<literal>'M'</literal> 匹配上这个正则表达式，因为第一个可选的 <literal>M</literal> 匹配上，而第二个和第三个 <literal>M</literal> 被忽略掉了。</para>
</callout>
<callout arearefs="re.roman.1.3">
<para><literal>'MM'</literal> 能匹配上是因为第一和第二个可选的 <literal>M</literal> 匹配上，而忽略掉第三个 <literal>M</literal>。</para>
</callout>
<callout arearefs="re.roman.1.4">
<para><literal>'MMM'</literal> 能匹配上因为三个 <literal>M</literal> 都匹配上了。</para>
</callout>
<callout arearefs="re.roman.1.5">
<para><literal>'MMMM'</literal> 没有匹配上。因为所有的三个 <literal>M</literal> 都匹配完了，但是正则表达式还有字符串尾部的限制 (由于字符 <literal>$</literal>)，而字符串又没有结束 (因为还有第四个 <literal>M</literal> 字符)，因此 &search; 函数返回一个 &none;。</para>
</callout>
<callout arearefs="re.roman.1.6">
<para>有趣的是，一个空字符串也能够匹配这个正则表达式，因为所有的字符 <literal>M</literal> 都是可选的。</para>
</callout>
</calloutlist>
</example>
</section>
<section>
<title>校验百位数</title>
<para>与千位数相比，百位数识别起来要困难得多，这是因为有多种相互独立的表达方式都可以表达百位数，而具体用那种方式表达和具体的数值有关。</para>
<itemizedlist>
<listitem><para><literal>100</literal> = <literal>C</literal></para></listitem>
<listitem><para><literal>200</literal> = <literal>CC</literal></para></listitem>
<listitem><para><literal>300</literal> = <literal>CCC</literal></para></listitem>
<listitem><para><literal>400</literal> = <literal>CD</literal></para></listitem>
<listitem><para><literal>500</literal> = <literal>D</literal></para></listitem>
<listitem><para><literal>600</literal> = <literal>DC</literal></para></listitem>
<listitem><para><literal>700</literal> = <literal>DCC</literal></para></listitem>
<listitem><para><literal>800</literal> = <literal>DCCC</literal></para></listitem>
<listitem><para><literal>900</literal> = <literal>CM</literal></para></listitem>
</itemizedlist>
<para>因此有四种可能的模式：</para>
<itemizedlist>
<listitem><para><literal>CM</literal></para></listitem>
<listitem><para><literal>CD</literal></para></listitem>
<listitem><para>零到三次出现 <literal>C</literal> 字符 (出现零次表示百位数为 0)</para></listitem>
<listitem><para><literal>D</literal>，后面跟零个到三个 <literal>C</literal> 字符</para></listitem>
</itemizedlist>
<para>后面两个模式可以结合到一起：</para>
<itemizedlist>
<listitem><para>一个可选的字符 <literal>D</literal>，加上零到 3 个 <literal>C</literal> 字符。</para></listitem>
</itemizedlist>
<para>这个例子显示如何有效地识别罗马数字的百位数。</para>
<example id="re.roman.hundreds">
<title>检验百位数</title>
<screen>
&prompt;<userinput>import re</userinput>
&prompt;<userinput>pattern = '^M?M?M?(CM|CD|D?C?C?C?)$'</userinput> <co id="re.roman.2.1"/>
&prompt;<userinput>re.search(pattern, 'MCM')</userinput>            <co id="re.roman.2.2"/>
<computeroutput>&lt;SRE_Match object at 01070390></computeroutput>
&prompt;<userinput>re.search(pattern, 'MD')</userinput>             <co id="re.roman.2.3"/>
<computeroutput>&lt;SRE_Match object at 01073A50></computeroutput>
&prompt;<userinput>re.search(pattern, 'MMMCCC')</userinput>         <co id="re.roman.2.4"/>
<computeroutput>&lt;SRE_Match object at 010748A8></computeroutput>
&prompt;<userinput>re.search(pattern, 'MCMC')</userinput>           <co id="re.roman.2.5"/>
&prompt;<userinput>re.search(pattern, '')</userinput>               <co id="re.roman.2.6"/>
<computeroutput>&lt;SRE_Match object at 01071D98></computeroutput></screen>
<calloutlist>
<callout arearefs="re.roman.2.1">
<para>这个模式的首部和上一个模式相同，检查字符串的开始 (<literal>^</literal>)，接着匹配千位数 (<literal>M?M?M?</literal>)，然后才是这个模式的新内容。在括号内，定义了包含有三个互相独立的模式集合，由垂直线隔开：<literal>CM</literal>、<literal>CD</literal> 和 <literal>D?C?C?C?</literal> (<literal>D</literal>是可选字符，接着是 0 到 3 个可选的 <literal>C</literal> 字符)。正则表达式解析器依次检查这些模式 (从左到右)，如果匹配上第一个模式，则忽略剩下的模式。</para>
</callout>
<callout arearefs="re.roman.2.2">
<para><literal>'MCM'</literal> 匹配上，因为第一个 <literal>M</literal> 字符匹配，第二和第三个 <literal>M</literal> 字符被忽略掉，而 <literal>CM</literal> 匹配上 (因此 <literal>CD</literal> 和 <literal>D?C?C?C?</literal> 两个模式不再考虑)。<literal>MCM</literal> 表示罗马数字<literal>1900</literal>。</para>
</callout>
<callout arearefs="re.roman.2.3">
<para><literal>'MD'</literal> 匹配上，因为第一个字符 <literal>M</literal> 匹配上，第二第三个 <literal>M</literal> 字符忽略，而模式 <literal>D?C?C?C?</literal> 匹配上 <literal>D</literal> (模式中的三个可选的字符 <literal>C</literal> 都被忽略掉了)。<literal>MD</literal> 表示罗马数字 <literal>1500</literal>。</para>
</callout>
<callout arearefs="re.roman.2.4">
<para><literal>'MMMCCC'</literal> 匹配上，因为三个 <literal>M</literal> 字符都匹配上，而模式 <literal>D?C?C?C?</literal> 匹配上 <literal>CCC</literal> (字符<literal>D</literal>是可选的，此处忽略)。<literal>MMMCCC</literal> 表示罗马数字 <literal>3300</literal>。</para>
</callout>
<callout arearefs="re.roman.2.5">
<para><literal>'MCMC'</literal> 没有匹配上。第一个 <literal>M</literal> 字符匹配上，第二第三个 <literal>M</literal> 字符忽略，接着是 <literal>CM</literal> 匹配上，但是接着是 <literal>$</literal> 字符没有匹配，因为字符串还没有结束 (你仍然还有一个没有匹配的<literal>C</literal>字符)。<literal>C</literal> 字符也<emphasis>不</emphasis> 匹配模式 <literal>D?C?C?C?</literal> 的一部分，因为与之相互独立的模式 <literal>CM</literal> 已经匹配上。</para>
</callout>
<callout arearefs="re.roman.2.6">
<para>有趣的是，一个空字符串也可以匹配这个模式，因为所有的 <literal>M</literal> 字符都是可选的，它们都被忽略，并且一个空字符串可以匹配 <literal>D?C?C?C?</literal> 模式，此处所有的字符也都是可选的，并且都被忽略。</para>
</callout>
</calloutlist>
</example>
<para>哎呀！看看正则表达式能够多快变得难以理解？你仅仅表示了罗马数字的千位和百位上的数字。如果你根据类似的方法，十位数和各位数就非常简单了，因为是完全相同的模式。让我们来看表达这个模式的另一种方式吧。</para>
</section>
</section>
<section id="re.nm">
<?dbhtml filename="regular_expressions/n_m_syntax.html"?>
<title>使用 <literal>{n,m}</literal> 语法</title>
<abstract>
<title/>
<para>在<link linkend="re.roman">前面的章节</link>，你处理了相同字符可以重复三次的情况。在正则表达式中，有另外一个方式来表达这种情况，并且能提高代码的可读性。首先看看我们在前面的例子中使用的方法。</para>
</abstract>
<example>
<title>老方法：每一个字符都是可选的</title>
<screen>
&prompt;<userinput>import re</userinput>
&prompt;<userinput>pattern = '^M?M?M?$'</userinput>
&prompt;<userinput>re.search(pattern, 'M')</userinput>    <co id="re.nm.1.1"/>
<computeroutput>&lt;_sre.SRE_Match object at 0x008EE090></computeroutput>
&prompt;<userinput>pattern = '^M?M?M?$'</userinput>
&prompt;<userinput>re.search(pattern, 'MM')</userinput>   <co id="re.nm.1.2"/>
<computeroutput>&lt;_sre.SRE_Match object at 0x008EEB48></computeroutput>
&prompt;<userinput>pattern = '^M?M?M?$'</userinput>
&prompt;<userinput>re.search(pattern, 'MMM')</userinput>  <co id="re.nm.1.3"/>
<computeroutput>&lt;_sre.SRE_Match object at 0x008EE090></computeroutput>
&prompt;<userinput>re.search(pattern, 'MMMM')</userinput> <co id="re.nm.1.4"/>
&prompt;
</screen>
<calloutlist>
<callout arearefs="re.nm.1.1">
<para>这个模式匹配串的开始，接着是第一个可选的字符 <literal>M</literal>，第二第三个 <literal>M</literal> 字符则被忽略 (这是可行的，因为它们都是可选的)，最后是字符串的结尾。</para>
</callout>
<callout arearefs="re.nm.1.2">
<para>这个模式匹配串的开始，接着是第一和第二个可选字符 <literal>M</literal>，而第三个 <literal>M</literal> 字符被忽略 (这是可行的，因为它们都是可选的)，最后匹配字符串的结尾。</para>
</callout>
<callout arearefs="re.nm.1.3">
<para>这个模式匹配字符串的开始，接着匹配所有的三个可选字符 <literal>M</literal>，最后匹配字符串的结尾。</para>
</callout>
<callout arearefs="re.nm.1.4">
<para>这个模式匹配字符串的开始，接着匹配所有的三个可选字符 <literal>M</literal>，但是不能够匹配字符串的结尾 (因为还有一个未匹配的字符 <literal>M</literal>)，因此不能够匹配而返回一个 &none;。</para>
</callout>
</calloutlist>
</example>
<example>
<title>一个新的方法：从 <literal>n</literal> 到 <literal>m</literal></title>
<screen>
&prompt;<userinput>pattern = '^M{0,3}$'</userinput>       <co id="re.nm.2.0"/>
&prompt;<userinput>re.search(pattern, 'M')</userinput>    <co id="re.nm.2.1"/>
<computeroutput>&lt;_sre.SRE_Match object at 0x008EEB48></computeroutput>
&prompt;<userinput>re.search(pattern, 'MM')</userinput>   <co id="re.nm.2.2"/>
<computeroutput>&lt;_sre.SRE_Match object at 0x008EE090></computeroutput>
&prompt;<userinput>re.search(pattern, 'MMM')</userinput>  <co id="re.nm.2.3"/>
<computeroutput>&lt;_sre.SRE_Match object at 0x008EEDA8></computeroutput>
&prompt;<userinput>re.search(pattern, 'MMMM')</userinput> <co id="re.nm.2.4"/>
&prompt;
</screen>
<calloutlist>
<callout arearefs="re.nm.2.0">
<para>这个模式意思是说：<quote>匹配字符串的开始，接着匹配 0 到 3 个 <literal>M</literal> 字符，然后匹配字符串的结尾。</quote>这里的 0 和 3 可以改成其它任何数字；如果你想要匹配至少 1 次，至多 3 次字符 <literal>M</literal>，则可以写成 <literal>M{1,3}</literal>。</para>
</callout>
<callout arearefs="re.nm.2.1">
<para>这个模式匹配字符串的开始，接着匹配三个可选 <literal>M</literal> 字符中的一个，最后是字符串的结尾。</para>
</callout>
<callout arearefs="re.nm.2.2">
<para>这个模式匹配字符串的开始，接着匹配三个可选 <literal>M</literal> 字符中的两个，最后是字符串的结尾。</para>
</callout>
<callout arearefs="re.nm.2.3">
<para>这个模式匹配字符串的开始，接着匹配三个可选 <literal>M</literal> 字符中的三个，最后是字符串的结尾。</para>
</callout>
<callout arearefs="re.nm.2.4">
<para>这个模式匹配字符串的开始，接着匹配三个可选 <literal>M</literal> 字符中的三个，但是<emphasis>没有匹配上</emphasis> 字符串的结尾。正则表达式在字符串结尾之前最多只允许匹配三次 <literal>M</literal> 字符，但是实际上有四个 <literal>M</literal> 字符，因此模式没有匹配上这个字符串，返回一个 &none;。</para>
</callout>
</calloutlist>
</example>
<note>
<!--<title>比较正则表达式</title>-->
<title/>
<para>没有一个轻松的方法来确定两个正则表达式是否等价。你能采用的最好的办法就是列出很多的测试样例，确定这两个正则表达式对所有的相关输入都有相同的输出。在本书后面的章节，将更多地讨论如何编写测试样例。</para>
</note>
<section>
<title>校验十位数和个位数</title>
<para>现在我们来扩展一下关于罗马数字的正则表达式，以匹配十位数和个位数，下面的例子展示十位数的校验方法。</para>
<example id="re.tens.example">
<title>校验十位数</title>
<screen>
&prompt;<userinput>pattern = '^M?M?M?(CM|CD|D?C?C?C?)(XC|XL|L?X?X?X?)$'</userinput>
&prompt;<userinput>re.search(pattern, 'MCMXL')</userinput>    <co id="re.nm.3.3"/>
<computeroutput>&lt;_sre.SRE_Match object at 0x008EEB48></computeroutput>
&prompt;<userinput>re.search(pattern, 'MCML')</userinput>     <co id="re.nm.3.4"/>
<computeroutput>&lt;_sre.SRE_Match object at 0x008EEB48></computeroutput>
&prompt;<userinput>re.search(pattern, 'MCMLX')</userinput>    <co id="re.nm.3.5"/>
<computeroutput>&lt;_sre.SRE_Match object at 0x008EEB48></computeroutput>
&prompt;<userinput>re.search(pattern, 'MCMLXXX')</userinput>  <co id="re.nm.3.7"/>
<computeroutput>&lt;_sre.SRE_Match object at 0x008EEB48></computeroutput>
&prompt;<userinput>re.search(pattern, 'MCMLXXXX')</userinput> <co id="re.nm.3.8"/>
&prompt;
</screen>
<calloutlist>
<callout arearefs="re.nm.3.3">
<para>这个模式匹配字符串的开始，接着是第一个可选字符 <literal>M</literal>，接着是 <literal>CM</literal>，接着 <literal>XL</literal>，接着是字符串的结尾。请记住，<literal>(A|B|C)</literal> 这个语法的含义是<quote>精确匹配 A、B 或者 C 其中的一个</quote>。此处匹配了 <literal>XL</literal>，因此不再匹配 <literal>XC</literal> 和 <literal>L?X?X?X?</literal>，接着就匹配到字符串的结尾。<literal>MCML</literal> 表示罗马数字 <literal>1940</literal>。</para>
</callout>
<callout arearefs="re.nm.3.4">
<para>这个模式匹配字符串的开始，接着是第一个可选字符 <literal>M</literal>，接着是 <literal>CM</literal>，接着 <literal>L?X?X?X?</literal>。在模式 <literal>L?X?X?X?</literal> 中，它匹配 <literal>L</literal> 字符并且跳过所有可选的 <literal>X</literal> 字符，接着匹配字符串的结尾。<literal>MCML</literal> 表示罗马数字 <literal>1950</literal>。</para>
</callout>
<callout arearefs="re.nm.3.5">
<para>这个模式匹配字符串的开始，接着是第一个可选字符 <literal>M</literal>，接着是 <literal>CM</literal>，接着是可选的 <literal>L</literal> 字符和可选的第一个 <literal>X</literal> 字符，并且跳过第二第三个可选的 <literal>X</literal> 字符，接着是字符串的结尾。<literal>MCMLX</literal> 表示罗马数字 <literal>1960</literal>。</para>
</callout>
<callout arearefs="re.nm.3.7">
<para>这个模式匹配字符串的开始，接着是第一个可选字符 <literal>M</literal>，接着是 <literal>CM</literal>，接着是可选的 <literal>L</literal> 字符和所有的三个可选的 <literal>X</literal> 字符，接着匹配字符串的结尾。<literal>MCMLXXX</literal> 表示罗马数字 <literal>1980</literal>。</para>
</callout>
<callout arearefs="re.nm.3.8">
<para>这个模式匹配字符串的开始，接着是第一个可选字符<literal>M</literal>，接着是<literal>CM</literal>，接着是可选的 <literal>L</literal>字符和所有的三个可选的<literal>X</literal>字符，接着就<emphasis>未能匹配</emphasis> 字符串的结尾ie，因为还有一个未匹配的<literal>X</literal> 字符。所以整个模式匹配失败并返回一个 &none;.  <literal>MCMLXXXX</literal> 不是一个有效的罗马数字。</para>
</callout>
</calloutlist>
</example>
<para>对于个位数的正则表达式有类似的表达方式，我将省略细节，直接展示结果。</para>
<informalexample>
<!--<title>个位数</title>-->
<screen>
&prompt;<userinput>pattern = '^M?M?M?(CM|CD|D?C?C?C?)(XC|XL|L?X?X?X?)(IX|IV|V?I?I?I?)$'</userinput>
</screen>
</informalexample>
<para>用另一种 <literal>{n,m}</literal> 语法表达这个正则表达式会如何呢？这个例子展示新的语法。</para>
<example id="re.nm.example">
<title>用 <literal>{n,m}</literal> 语法确认罗马数字</title>
<screen>
&prompt;<userinput>pattern = '^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$'</userinput>
&prompt;<userinput>re.search(pattern, 'MDLV')</userinput>             <co id="re.nm.4.1"/>
<computeroutput>&lt;_sre.SRE_Match object at 0x008EEB48></computeroutput>
&prompt;<userinput>re.search(pattern, 'MMDCLXVI')</userinput>         <co id="re.nm.4.2"/>
<computeroutput>&lt;_sre.SRE_Match object at 0x008EEB48></computeroutput>
&prompt;<userinput>re.search(pattern, 'MMMDCCCLXXXVIII')</userinput>  <co id="re.nm.4.3"/>
<computeroutput>&lt;_sre.SRE_Match object at 0x008EEB48></computeroutput>
&prompt;<userinput>re.search(pattern, 'I')</userinput>                <co id="re.nm.4.4"/>
<computeroutput>&lt;_sre.SRE_Match object at 0x008EEB48></computeroutput>
</screen>
<calloutlist>
<callout arearefs="re.nm.4.1">
<para>这个模式匹配字符串的开始，接着匹配三个可选的 <literal>M</literal> 字符的一个，接着匹配 <literal>D?C{0,3}</literal>，此处，仅仅匹配可选的字符 <literal>D</literal> 和 0 个可选字符 <literal>C</literal>。继续向前匹配，匹配 <literal>L?X{0,3}</literal>，此处，匹配可选的 <literal>L</literal> 字符和 0 个可选字符 <literal>X</literal>，接着匹配 <literal>V?I{0,3}</literal>，此处，匹配可选的 V 和 0 个可选字符 <literal>I</literal>，最后匹配字符串的结尾。<literal>MDLV</literal> 表示罗马数字 <literal>1555</literal>。</para>
</callout>
<callout arearefs="re.nm.4.2">
<para>这个模式匹配字符串的开始，接着是三个可选的 <literal>M</literal> 字符的两个，接着匹配 <literal>D?C{0,3}</literal>，此处为一个字符 <literal>D</literal> 和三个可选 <literal>C</literal> 字符中的一个，接着匹配 <literal>L?X{0,3}</literal>，此处为一个 <literal>L</literal> 字符和三个可选 <literal>X</literal> 字符中的一个，接着匹配 <literal>V?I{0,3}</literal>，此处为一个字符 <literal>V</literal> 和三个可选 <literal>I</literal> 字符中的一个，接着匹配字符串的结尾。<literal>MMDCLXVI</literal> 表示罗马数字 <literal>2666</literal>。</para>
</callout>
<callout arearefs="re.nm.4.3">
<para>这个模式匹配字符串的开始，接着是三个可选的 <literal>M</literal> 字符的所有字符，接着匹配 <literal>D?C{0,3}</literal>，此处为一个字符 <literal>D</literal> 和三个可选 <literal>C</literal> 字符中所有字符，接着匹配 <literal>L?X{0,3}</literal>，此处为一个 <literal>L</literal> 字符和三个可选 <literal>X</literal> 字符中所有字符，接着匹配 <literal>V?I{0,3}</literal>，此处为一个字符 <literal>V</literal> 和三个可选 <literal>I</literal> 字符中所有字符，接着匹配字符串的结尾。<literal>MMMDCCCLXXXVIII</literal> 表示罗马数字<literal>3888</literal>，这个数字是不用扩展语法可以写出的最大的罗马数字。</para>
</callout>
<callout arearefs="re.nm.4.4">
<para>仔细看哪！(我像一个魔术师一样，<quote>看仔细喽，孩子们，我将要从我的帽子中拽出一只兔子来啦！</quote>) 这个模式匹配字符串的开始，接着匹配 3 个可选 <literal>M</literal> 字符的 0 个，接着匹配 <literal>D?C{0,3}</literal>，此处，跳过可选字符 <literal>D</literal> 并匹配三个可选 <literal>C</literal> 字符的 0 个，接着匹配 <literal>L?X{0,3}</literal>，此处，跳过可选字符 <literal>L</literal> 并匹配三个可选 <literal>X</literal> 字符的 0 个，接着匹配 <literal>V?I{0,3}</literal>，此处跳过可选字符 <literal>V</literal> 并匹配三个可选 <literal>I</literal> 字符的一个，最后匹配字符串的结尾。哇赛！</para>
</callout>
</calloutlist>
</example>
<para>如果你在第一遍就跟上并理解了所讲的这些，那么你做的比我还要好。现在，你可以尝试着理解别人大规模程序里关键函数中的正则表达式了。或者想象着几个月后回头理解你自己的正则表达式。我曾经做过这样的事情，但是它并不是那么有趣。</para>
<para>在下一节里，你将会研究另外一种正则表达式语法，它可以使你的表达式具有更好的可维持性。</para>
</section>
</section>
<section id="re.verbose">
<?dbhtml filename="regular_expressions/verbose.html"?>
<title>松散正则表达式</title>
<abstract>
<title/>
<para>迄今为止，你只是处理过被我称之为<quote>紧凑</quote>类型的正则表达式。正如你曾看到的，它们难以阅读，即使你清楚正则表达式的含义，你也不能保证六个月以后你还能理解它。你真正所需的就是利用内联文档 (inline documentation)。</para>
</abstract>
<para>&python; 允许用户利用所谓的<emphasis>松散正则表达式</emphasis> 来完成这个任务。一个松散正则表达式和一个紧凑正则表达式主要区别表现在两个方面：</para>
<itemizedlist>
<listitem><para>忽略空白符。空格符，制表符，回车符不匹配它们自身，它们根本不参与匹配。(如果你想在松散正则表达式中匹配一个空格符，你必须在它前面添加一个反斜线符号对它进行转义。)</para></listitem>
<listitem><para>忽略注释。在松散正则表达式中的注释和在普通 &python; 代码中的一样：开始于一个<literal>#</literal>符号，结束于行尾。这种情况下，采用在一个多行字符串中注释，而不是在源代码中注释，它们以相同的方式工作。</para></listitem>
</itemizedlist>
<para>用一个例子可以解释得更清楚。让我们重新来看前面的紧凑正则表达式，利用松散正则表达式重新表达。下面的例子显示实现方法。</para>
<example>
<title>带有内联注释 (Inline Comments) 的正则表达式</title>
<screen>
&prompt;<userinput>pattern = """
    ^                   # beginning of string
    M{0,3}              # thousands - 0 to 3 M's
    (CM|CD|D?C{0,3})    # hundreds - 900 (CM), 400 (CD), 0-300 (0 to 3 C's),
                        #            or 500-800 (D, followed by 0 to 3 C's)
    (XC|XL|L?X{0,3})    # tens - 90 (XC), 40 (XL), 0-30 (0 to 3 X's),
                        #        or 50-80 (L, followed by 0 to 3 X's)
    (IX|IV|V?I{0,3})    # ones - 9 (IX), 4 (IV), 0-3 (0 to 3 I's),
                        #        or 5-8 (V, followed by 0 to 3 I's)
    $                   # end of string
    """</userinput>
&prompt;<userinput>re.search(pattern, 'M', re.VERBOSE)</userinput>                <co id="re.verbose.1.1"/>
<computeroutput>&lt;_sre.SRE_Match object at 0x008EEB48></computeroutput>
&prompt;<userinput>re.search(pattern, 'MCMLXXXIX', re.VERBOSE)</userinput>        <co id="re.verbose.1.2"/>
<computeroutput>&lt;_sre.SRE_Match object at 0x008EEB48></computeroutput>
&prompt;<userinput>re.search(pattern, 'MMMDCCCLXXXVIII', re.VERBOSE)</userinput>  <co id="re.verbose.1.3"/>
<computeroutput>&lt;_sre.SRE_Match object at 0x008EEB48></computeroutput>
&prompt;<userinput>re.search(pattern, 'M')</userinput>                            <co id="re.verbose.1.4"/>
</screen>
<calloutlist>
<callout arearefs="re.verbose.1.1">
<para>当使用松散正则表达式时，最重要的一件事情就是：必须传递一个额外的参数 <literal>re.VERBOSE</literal>，该参数是定义在 &re; 模块中的一个常量，标志着待匹配的正则表达式是一个松散正则表达式。正如你看到的，这个模式中，有很多空格 (所有的空格都被忽略)，和几个注释 (所有的注释也被忽略)。如果忽略所有的空格和注释，它就和<link linkend="re.nm">前面章节</link>里的正则表达式完全相同，但是具有更好的可读性。</para>
</callout>
<callout arearefs="re.verbose.1.2">
<para>这个模式匹配字符串的开始，接着匹配三个可选 <literal>M</literal> 字符中的一个，接着匹配 <literal>CM</literal>，接着是字符 <literal>L</literal> 和三个可选 <literal>X</literal> 字符的所有字符，接着是 <literal>IX</literal>，然后是字符串的结尾。</para>
</callout>
<callout arearefs="re.verbose.1.3">
<para>这个模式匹配字符串的开始，接着是三个可选的 <literal>M</literal> 字符的所有字符，接着匹配 <literal>D?C{0,3}</literal>，此处为一个字符 <literal>D</literal> 和三个可选 <literal>C</literal> 字符中所有字符，接着匹配 <literal>L?X{0,3}</literal>，此处为一个 <literal>L</literal> 字符和三个可选 <literal>X</literal> 字符中所有字符，接着匹配 <literal>V?I{0,3}</literal>，此处为一个字符 <literal>V</literal> 和三个可选 <literal>I</literal> 字符中所有字符，接着匹配字符串的结尾。</para>
</callout>
<callout arearefs="re.verbose.1.4">
<para>这个没有匹配。为什么呢？因为没有 <literal>re.VERBOSE</literal> 标记，所以 <function>re.search</function> 函数把模式作为一个紧凑正则表达式进行匹配。&python; 不能自动检测一个正则表达式是为松散类型还是紧凑类型。&python; 默认每一个正则表达式都是紧凑类型的，除非你显式地标明一个正则表达式为松散类型。</para>
</callout>
</calloutlist>
</example>
</section>
<section id="re.phone">
<?dbhtml filename="regular_expressions/phone_numbers.html"?>
<title>个案研究：解析电话号码</title>
<abstract>
<title/>
<para>迄今为止，你主要是匹配整个模式，不论是匹配上，还是没有匹配上。但是正则表达式还有比这更为强大的功能。当一个模式<emphasis>确实</emphasis> 匹配上时，你可以获取模式中特定的片断，你可以发现具体匹配的位置。</para>
</abstract>
<para>这个例子来源于我遇到的另一个现实世界的问题，也是在以前的工作中遇到的。问题是：解析一个美国电话号码。客户要能 (在一个单一的区域中) 输入任何数字，然后存储区号、干线号、电话号和一个可选的独立的分机号到公司数据库里。为此，我通过网络找了很多正则表达式的例子，但是没有一个能够完全满足我的要求。</para>
<para>这里列举了我必须能够接受的电话号码：</para>
<itemizedlist>
<listitem><para><literal>800-555-1212</literal></para></listitem>
<listitem><para><literal>800 555 1212</literal></para></listitem>
<listitem><para><literal>800.555.1212</literal></para></listitem>
<listitem><para><literal>(800) 555-1212</literal></para></listitem>
<listitem><para><literal>1-800-555-1212</literal></para></listitem>
<listitem><para><literal>800-555-1212-1234</literal></para></listitem>
<listitem><para><literal>800-555-1212x1234</literal></para></listitem>
<listitem><para><literal>800-555-1212 ext. 1234</literal></para></listitem>
<listitem><para><literal>work 1-(800) 555.1212 #1234</literal></para></listitem>
</itemizedlist>
<para>格式可真够多的！我需要知道区号是 <literal>800</literal>，干线号是 <literal>555</literal>，电话号的其他数字为 <literal>1212</literal>。对于那些有分机号的，我需要知道分机号为 <literal>1234</literal>。</para>
<para>让我们完成电话号码解析这个工作，这个例子展示第一步。</para>
<example id="re.phone.example">
<title>发现数字</title>
<screen>
&prompt;<userinput>phonePattern = re.compile(r'^(\d{3})-(\d{3})-(\d{4})$')</userinput> <co id="re.phone.1.1"/>
&prompt;<userinput>phonePattern.search('800-555-1212').groups()</userinput>            <co id="re.phone.1.2"/>
<computeroutput>('800', '555', '1212')</computeroutput>
&prompt;<userinput>phonePattern.search('800-555-1212-1234')</userinput>                <co id="re.phone.1.3"/>
&prompt;
</screen>
<calloutlist>
<callout arearefs="re.phone.1.1">
<para>我们通常从左到右阅读正则表达式。这个正则表达式匹配字符串的开始，接着匹配 <literal>(\d{3})</literal>。<literal>\d{3}</literal> 是什么呢？好吧，<literal>{3}</literal> 的含义是<quote>精确匹配三个数字</quote>；这是曾在前面见到过的 <link linkend="re.nm"><literal>{n,m}</literal></link> 语法的一种变形。<literal>\d</literal> 的含义是 <quote>任何一个数字</quote> (<literal>0</literal> 到 <literal>9</literal>)。把它们放大括号中意味着要<quote>精确匹配三个数字位，<emphasis>接着把它们作为一个组保存下来，以便后面的调用</emphasis></quote>。接着匹配一个连字符，接着是另外一个精确匹配三个数字位的组，接着另外一个连字符，接着另外一个精确匹配四个数字为的组，接着匹配字符串的结尾。</para>
</callout>
<callout arearefs="re.phone.1.2">
<para>为了访问正则表达式解析过程中记忆下来的多个组，我们使用 <function>search</function> 函数返回对象的 <function>groups()</function> 函数。这个函数将返回一个元组，元组中的元素就是正则表达式中定义的组。在这个例子中，定义了三个组，第一个组有三个数字位，第二个组有三个数字位，第三个组有四个数字位。</para>
</callout>
<callout arearefs="re.phone.1.3">
<para>这个正则表达式不是最终的答案，因为它不能处理在电话号码结尾有分机号的情况，为此，我们需要扩展这个正则表达式。</para>
</callout>
</calloutlist>
</example>
<example>
<title>发现分机号</title>
<screen>
&prompt;<userinput>phonePattern = re.compile(r'^(\d{3})-(\d{3})-(\d{4})-(\d+)$')</userinput> <co id="re.phone.2.1"/>
&prompt;<userinput>phonePattern.search('800-555-1212-1234').groups()</userinput>             <co id="re.phone.2.2"/>
<computeroutput>('800', '555', '1212', '1234')</computeroutput>
&prompt;<userinput>phonePattern.search('800 555 1212 1234')</userinput>                      <co id="re.phone.2.3"/>
&prompt;
&prompt;<userinput>phonePattern.search('800-555-1212')</userinput>                           <co id="re.phone.2.4"/>
&prompt;
</screen>
<calloutlist>
<callout arearefs="re.phone.2.1">
<para>这个正则表达式和上一个几乎相同，正像前面的那样，匹配字符串的开始，接着匹配一个有三个数字位的组并记忆下来，接着是一个连字符，接着是一个有三个数字位的组并记忆下来，接着是一个连字符，接着是一个有四个数字位的组并记忆下来。不同的地方是你接着又匹配了另一个连字符，然后是一个有一个或者多个数字位的组并记忆下来，最后是字符串的结尾。</para>
</callout>
<callout arearefs="re.phone.2.2">
<para>函数 <function>groups()</function> 现在返回一个有四个元素的元组，由于正则表达式中定义了四个记忆的组。</para>
</callout>
<callout arearefs="re.phone.2.3">
<para>不幸的是，这个正则表达式也不是最终的答案，因为它假设电话号码的不同部分是由连字符分割的。如果一个电话号码是由空格符、逗号或者点号分割呢？你需要一个更一般的解决方案来匹配几种不同的分割类型。</para>
</callout>
<callout arearefs="re.phone.2.4">
<para>啊呀！这个正则表达式不仅不能解决你想要的任何问题，反而性能更弱了，因为现在你甚至不能解析一个没有分机号的电话号码了。这根本不是你想要的，如果有分机号，你要知道分机号是什么，如果没有分机号，你仍然想要知道主电话号码的其他部分是什么。</para>
</callout>
</calloutlist>
</example>
<para>下一个例子展示正则表达式处理一个电话号码内部，采用不同分隔符的情况。</para>
<example>
<title>处理不同分隔符</title>
<screen>
&prompt;<userinput>phonePattern = re.compile(r'^(\d{3})\D+(\d{3})\D+(\d{4})\D+(\d+)$')</userinput> <co id="re.phone.3.1"/>
&prompt;<userinput>phonePattern.search('800 555 1212 1234').groups()</userinput>                   <co id="re.phone.3.2"/>
<computeroutput>('800', '555', '1212', '1234')</computeroutput>
&prompt;<userinput>phonePattern.search('800-555-1212-1234').groups()</userinput>                   <co id="re.phone.3.3"/>
<computeroutput>('800', '555', '1212', '1234')</computeroutput>
&prompt;<userinput>phonePattern.search('80055512121234')</userinput>                               <co id="re.phone.3.4"/>
&prompt;
&prompt;<userinput>phonePattern.search('800-555-1212')</userinput>                                 <co id="re.phone.3.5"/>
&prompt;
</screen>
<calloutlist>
<callout arearefs="re.phone.3.1">
<para>当心啦！你首先匹配字符串的开始，接着是一个三个数字位的组，接着是 <literal>\D+</literal>，这是个什么东西？好吧，<literal>\D</literal> 匹配任意字符，<emphasis>除了</emphasis> 数字位，<literal>+</literal> 表示<quote>1 个或者多个</quote>，因此 <literal>\D+</literal> 匹配一个或者多个不是数字位的字符。这就是你替换连字符为了匹配不同分隔符所用的方法。</para>
</callout>
<callout arearefs="re.phone.3.2">
<para>使用 <literal>\D+</literal> 代替 <literal>-</literal> 意味着现在你可以匹配中间是空格符分割的电话号码了。</para>
</callout>
<callout arearefs="re.phone.3.3">
<para>当然，用连字符分割的电话号码也能够被识别。</para>
</callout>
<callout arearefs="re.phone.3.4">
<para>不幸的是，这个正则表达式仍然不是最终答案，因为它假设电话号码一定有分隔符。如果电话号码中间没有空格符或者连字符的情况会怎样哪？</para>
</callout>
<callout arearefs="re.phone.3.4">
<para>我的天！这个正则表达式也没有达到我们对于分机号识别的要求。现在你共有两个问题，但是你可以利用相同的技术来解决它们。</para>
</callout>
</calloutlist>
</example>
<para>下一个例子展示正则表达式处理<emphasis>没有</emphasis> 分隔符的电话号码的情况。</para>
<example>
<title>处理没有分隔符的数字</title>
<screen>
&prompt;<userinput>phonePattern = re.compile(r'^(\d{3})\D*(\d{3})\D*(\d{4})\D*(\d*)$')</userinput> <co id="re.phone.4.1"/>
&prompt;<userinput>phonePattern.search('80055512121234').groups()</userinput>                      <co id="re.phone.4.2"/>
<computeroutput>('800', '555', '1212', '1234')</computeroutput>
&prompt;<userinput>phonePattern.search('800.555.1212 x1234').groups()</userinput>                  <co id="re.phone.4.3"/>
<computeroutput>('800', '555', '1212', '1234')</computeroutput>
&prompt;<userinput>phonePattern.search('800-555-1212').groups()</userinput>                        <co id="re.phone.4.4"/>
<computeroutput>('800', '555', '1212', '')</computeroutput>
&prompt;<userinput>phonePattern.search('(800)5551212 x1234')</userinput>                           <co id="re.phone.4.5"/>
&prompt;
</screen>
<calloutlist>
<callout arearefs="re.phone.4.1">
<para>和上一步相比，你所做的唯一变化就是把所有的 <literal>+</literal> 变成 <literal>*</literal>。在电话号码的不同部分之间不再匹配 <literal>\D+</literal>，而是匹配 <literal>\D*</literal> 了。还记得 <literal>+</literal> 的含义是<quote>1 或者多个</quote>吗? 好的，<literal>*</literal> 的含义是<quote>0 或者多个</quote>。因此，现在你应该能够解析没有分隔符的电话号码了。</para>
</callout>
<callout arearefs="re.phone.4.2">
<para>你瞧，它真的可以胜任。为什么？首先匹配字符串的开始，接着是一个有三个数字位 (<literal>800</literal>) 的组，接着是 0 个非数字字符，接着是一个有三个数字位 (<literal>555</literal>) 的组，接着是 0 个非数字字符，接着是一个有四个数字位 (<literal>1212</literal>) 的组，接着是 0 个非数字字符，接着是一个有任意数字位 (<literal>1234</literal>) 的组，最后是字符串的结尾。</para>
</callout>
<callout arearefs="re.phone.4.3">
<para>对于其他的变化也能够匹配：比如点号分隔符，在分机号前面既有空格符又有 <literal>x</literal> 符号的情况也能够匹配。</para>
</callout>
<callout arearefs="re.phone.4.4">
<para>最后，你已经解决了长期存在的一个问题：现在分机号是可选的了。如果没有发现分机号，<function>groups()</function> 函数仍然返回一个有四个元素的元组，但是第四个元素只是一个空字符串。</para>
</callout>
<callout arearefs="re.phone.4.5">
<para>我不喜欢做一个坏消息的传递人，此时你还没有完全结束这个问题。还有什么问题呢？当在区号前面还有一个额外的字符时，而正则表达式假设区号是一个字符串的开始，因此不能匹配。这个不是问题，你可以利用相同的技术<quote>0或者多个非数字字符</quote>来跳过区号前面的字符。</para>
</callout>
</calloutlist>
</example>
<para>下一个例子展示如何解决电话号码前面有其他字符的情况。</para>
<example>
<title>处理开始字符</title>
<screen>
&prompt;<userinput>phonePattern = re.compile(r'^\D*(\d{3})\D*(\d{3})\D*(\d{4})\D*(\d*)$')</userinput> <co id="re.phone.5.1"/>
&prompt;<userinput>phonePattern.search('(800)5551212 ext. 1234').groups()</userinput>                 <co id="re.phone.5.2"/>
<computeroutput>('800', '555', '1212', '1234')</computeroutput>
&prompt;<userinput>phonePattern.search('800-555-1212').groups()</userinput>                           <co id="re.phone.5.3"/>
<computeroutput>('800', '555', '1212', '')</computeroutput>
&prompt;<userinput>phonePattern.search('work 1-(800) 555.1212 #1234')</userinput>                     <co id="re.phone.5.4"/>
&prompt;
</screen>
<calloutlist>
<callout arearefs="re.phone.5.1">
<para>这个正则表达式和前面的几乎相同，但它在第一个记忆组 (区号) 前面匹配 <literal>\D*</literal>，0 或者多个非数字字符。注意，此处你没有记忆这些非数字字符 (它们没有被括号括起来)。如果你发现它们，只是跳过它们，接着只要匹配上就开始记忆区号。</para>
</callout>
<callout arearefs="re.phone.5.2">
<para>你可以成功地解析电话号码，即使在区号前面有一个左括号。(在区号后面的右括号也已经被处理，它被看成非数字字符分隔符，由第一个记忆组后面的 <literal>\D*</literal> 匹配。)</para>
</callout>
<callout arearefs="re.phone.5.3">
<para>进行仔细的检查，保证你没有破坏前面能够匹配的任何情况。由于首字符是完全可选的，这个模式匹配字符串的开始，接着是 0 个非数字字符，接着是一个有三个数字字符的记忆组 (<literal>800</literal>)，接着是 1 个非数字字符 (连字符)，接着是一个有三个数字字符的记忆组 (<literal>555</literal>)，接着是 1 个非数字字符 (连字符)，接着是一个有四个数字字符的记忆组 (<literal>1212</literal>)，接着是 0 个非数字字符，接着是一个有 0 个数字位的记忆组，最后是字符串的结尾。</para>
</callout>
<callout arearefs="re.phone.5.4">
<para>此处是正则表达式让我产生了找一个硬东西挖出自己的眼睛的冲动。为什么这个电话号码没有匹配上？因为在它的区号前面有一个 <literal>1</literal>，但是你认为在区号前面的所有字符都是非数字字符 (<literal>\D*</literal>)。唉！</para>
</callout>
</calloutlist>
</example>
<para>让我们往回看一下。迄今为止，正则表达式总是从一个字符串的开始匹配。但是现在你看到了，有很多不确定的情况需要你忽略。与其尽力全部匹配它们，还不如全部跳过它们，让我们采用一个不同的方法：根本不显式地匹配字符串的开始。下面的这个例子展示这个方法。</para>
<example>
<title>电话号码，无论何时我都要找到它</title>
<screen>
&prompt;<userinput>phonePattern = re.compile(r'(\d{3})\D*(\d{3})\D*(\d{4})\D*(\d*)$')</userinput> <co id="re.phone.6.1"/>
&prompt;<userinput>phonePattern.search('work 1-(800) 555.1212 #1234').groups()</userinput>        <co id="re.phone.6.2"/>
<computeroutput>('800', '555', '1212', '1234')</computeroutput>
&prompt;<userinput>phonePattern.search('800-555-1212')</userinput>                                <co id="re.phone.6.3"/>
<computeroutput>('800', '555', '1212', '')</computeroutput>
&prompt;<userinput>phonePattern.search('80055512121234')</userinput>                              <co id="re.phone.6.4"/>
<computeroutput>('800', '555', '1212', '1234')</computeroutput>
</screen>
<calloutlist>
<callout arearefs="re.phone.6.1">
<para>注意，在这个正则表达式的开始少了一个 <literal>^</literal> 字符。你不再匹配字符串的开始了，也就是说，你需要用你的正则表达式匹配整个输入字符串，除此之外没有别的意思了。正则表达式引擎将要努力计算出开始匹配输入字符串的位置，并且从这个位置开始匹配。</para>
</callout>
<callout arearefs="re.phone.6.2">
<para>现在你可以成功解析一个电话号码了，无论这个电话号码的首字符是不是数字，无论在电话号码各部分之间有多少任意类型的分隔符。</para>
</callout>
<callout arearefs="re.phone.6.3">
<para>仔细检查，这个正则表达式仍然工作的很好。</para>
</callout>
<callout arearefs="re.phone.6.4">
<para>还是能够工作。</para>
</callout>
</calloutlist>
</example>
<para>看看一个正则表达式能够失控得多快？回头看看前面的例子，你还能区别它们么？</para>
<para>当你还能够理解这个最终答案的时候 (这个正则表达式就是最终答案，即使你发现一种它不能处理的情况，我也真的不想知道它了)，在你忘记为什么你这么选择之前，让我们把它写成松散正则表达式的形式。</para>
<example>
<title>解析电话号码 (最终版本)</title>
<screen>
&prompt;<userinput>phonePattern = re.compile(r'''
                # don't match beginning of string, number can start anywhere
    (\d{3})     # area code is 3 digits (e.g. '800')
    \D*         # optional separator is any number of non-digits
    (\d{3})     # trunk is 3 digits (e.g. '555')
    \D*         # optional separator
    (\d{4})     # rest of number is 4 digits (e.g. '1212')
    \D*         # optional separator
    (\d*)       # extension is optional and can be any number of digits
    $           # end of string
    ''', re.VERBOSE)</userinput>
&prompt;<userinput>phonePattern.search('work 1-(800) 555.1212 #1234').groups()</userinput>        <co id="re.phone.7.1"/>
<computeroutput>('800', '555', '1212', '1234')</computeroutput>
&prompt;<userinput>phonePattern.search('800-555-1212')</userinput>                                <co id="re.phone.7.2"/>
<computeroutput>('800', '555', '1212', '')</computeroutput>
</screen>
<calloutlist>
<callout arearefs="re.phone.7.1">
<para>除了被分成多行，这个正则表达式和最后一步的那个完全相同，因此它能够解析相同的输入一点也不奇怪。</para>
</callout>
<callout arearefs="re.phone.7.2">
<para>进行最后的仔细检查。很好，仍然工作。你终于完成了这件任务。</para>
</callout>
</calloutlist>
</example>
<itemizedlist role="furtherreading">
<title>关于正则表达式的进一步阅读</title>
<listitem><para>&rehowto; 讲解正则表达式和如何在 &python; 中使用正则表达式。</para></listitem>
<listitem><para>&pythonlibraryreference; 概述了 &remodule_link;。</para></listitem>
</itemizedlist>
</section>
<section id="re.summary">
<?dbhtml filename="regular_expressions/summary.html"?>
<title>小结</title>
<abstract>
<title/>
<para>这只是正则表达式能够完成工作的很少一部分。换句话说，即使你现在备受打击，相信我，你也不是什么也没见过了。</para>
</abstract>
<para>现在，你应该熟悉下列技巧：</para>
<itemizedlist>
<listitem><para><literal>^</literal> 匹配字符串的开始。</para></listitem>
<listitem><para><literal>$</literal> 匹配字符串的结尾。</para></listitem>
<listitem><para><literal>\b</literal> 匹配一个单词的边界。</para></listitem>
<listitem><para><literal>\d</literal> 匹配任意数字。</para></listitem>
<listitem><para><literal>\D</literal> 匹配任意非数字字符。</para></listitem>
<listitem><para><literal>x?</literal> 匹配一个可选的 <literal>x</literal> 字符 (换言之，它匹配 1 次或者 0 次 <literal>x</literal> 字符)。</para></listitem>
<listitem><para><literal>x*</literal> 匹配0次或者多次 <literal>x</literal> 字符。</para></listitem>
<listitem><para><literal>x+</literal> 匹配1次或者多次 <literal>x</literal> 字符。</para></listitem>
<listitem><para><literal>x{n,m}</literal> 匹配 <literal>x</literal> 字符，至少 <literal>n</literal> 次，至多 <literal>m</literal> 次。</para></listitem>
<listitem><para><literal>(a|b|c)</literal> 要么匹配 <literal>a</literal>，要么匹配 <literal>b</literal>，要么匹配 <literal>c</literal>。</para></listitem>
<listitem><para><literal>(x)</literal> 一般情况下表示一个<emphasis>记忆组 (remembered group)</emphasis>。你可以利用 <function>re.search</function> 函数返回对象的 <function>groups()</function> 函数获取它的值。</para></listitem>
</itemizedlist>
<para>正则表达式非常强大，但是它并不能为每一个问题提供正确的解决方案。你应该学习足够多的知识，以辨别什么时候它们是合适的，什么时候它们会解决你的问题，什么时候它们产生的问题比要解决的问题还要多。</para>
<blockquote><attribution>Jamie Zawinski, <ulink url="http://groups.google.com/groups?selm=33F0C496.370D7C45%40netscape.com">in comp.emacs.xemacs</ulink></attribution><para>一些人，遇到一个问题时就想：<quote>我知道，我将使用正则表达式。</quote>现在他有两个问题了。</para></blockquote>
</section>
</chapter>

<!--
* Intro/Diving in
  * This chapter is for &python; programmers who have read the first three chapters of this book, but have never used regular expressions.  If you have used regular expressions in some other language (such as Perl), this chapter is not for you; go read some other document [link, find "&python; RE for Perl programmers", or write it] and get on with your life.
  * Jamie Zawinski (comp.lang.emacs): "Some people, when confronted with a problem, think 'I know, I'll use regular expressions.'  Now they have two problems."
* Case study: normalizing addresses
  * Use dialect.re section
  * Patterns:
    $  Match at end
    \b Match at word boundary
    ^  Match at beginning (add mention)
- Case study: validating Roman numerals
  * Roman numeral pattern (storyboard)
  * Storyboard:
    steal most of roman.stage5
    '^M?M?M?(CM|CD|D?C?C?C?)(XC|XL|L?X?X?X?)(IX|IV|V?I?I?I?)$'
    '^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$')

  * Patterns:
    .   Match any character
    ?   Match previous 0 or 1 times (optional)
    |   or
    {n,m} Match previous anywhere from n to m times

  * Verbose regular expressions

- Case study: extracting parts of an American phone number
  - Use phone number validation example
  - "grouping"
  - re.search(r'\D*(\d{3})\D*(\d{3})\D*(\d{4})\D*(\d*)$', s).groups()
  - Patterns:
    () define group which can be accessed later (really saw it in last section, but didn't fully utilize it)
    \d Match any digit
    \D Match any non-digit
    *  Match previous as many times as possible, 0 or more times
    +  Match previous as many times as possible, at least once
    *? Match previous as few times as possible, 0 or more times
    +? Match previous as few times as possible, at least once
-->
