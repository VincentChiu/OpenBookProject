.. rst3: filename: html\glossary.html

############
Glossary
############

.. Links used in this document.

.. ----- External links.

.. _`CWEB language`:                    http://www-cs-faculty.stanford.edu/~knuth/cweb.html
.. _`literate programming web page`:    http://www.literateprogramming.com/
.. _`noweb language`:                   http://www.eecs.harvard.edu/~nr/noweb/
.. _`rST primer`:                       http://docutils.sourceforge.net/docs/user/rst/quickstart.html

.. ----- Relative links.

.. _`Chapter 8: Customizing Leo`:   customizing.html
.. _`Writing plugins and hooks`:    writingPlugins.html

.. _`programming reference`:    directives.html
.. _`@asis`:                    directives.html#asis-and-noref
.. _`@auto`:                    directives.html#auto
.. _`@file`:                    directives.html#file-and-thin
.. _`@noref`:                   directives.html#asis-and-noref
.. _`@nosent`:                  directives.html#nosent
.. _`@root`:                    directives.html#root
.. _`@thin`:                    directives.html#file-and-thin
.. _`@unit documentation`:      directives.html#root
.. _`tangling @root trees`:     directives.html#tangling-root-trees-with-the-tangle-commands
.. _`untangling @root trees`:   directives.html#untangling-root-trees-with-the-untangle-commands

.. ----- References to the tutorial.
.. _`clones & views`:               intro.html#clones-views
.. _`leo's tutorial`:               intro.html
.. _`external files section`:        intro.html#derived-files
.. _`directives for programming`:   intro.html#directives-for-programming
.. _`leo directives`:               intro.html#leo-directives
.. _`quick start for programmers`:  intro.html#quick-start-for-programmers
.. _`sentinels lines`:              intro.html#sentinel-lines

**Important**: We often refer to outline_ nodes_ by the directives_ they contain.
For example, an `@root node`_ is a node containing an @root directive_, etc.
**Exception**: An `@file node`_ is a node whose *headline* starts with ``@file``.

.. _`@auto node`:
.. _`@file node`:
.. _`@thin node`:
.. _`@root node`:
.. _`@file nodes`:
.. _`@thin nodes`:
.. _`@root nodes`:

``@file node``
    An ``@file`` node_ is a node whose *headline* starts with ``@file``.
    **Important**: Headlines_ that start with ``@file-asis``, ``@file-noref``, ``@file-nosent``
    (and their abbreviations ``@asis``, ``@noref``, ``@nosent``) are collectively called ``@file`` nodes.

.. _`@auto tree`:
.. _`@file tree`:
.. _`@thin tree`:
.. _`@root tree`:
.. _`@file trees`:
.. _`@shadow trees`:
.. _`@thin trees`:
.. _`@root trees`:

``@file tree, @others tree, @root tree, etc.``
    An @file tree_ is a tree whose root_ is an @file node, etc.

``@asis, @auto, @file, @noref, @nosent, @thin``
    Headlines_ that start with one of these create (correspond to) `external files`_.
    The following synonyms exist::

        @asis, @file-asis
        @noref, @file-noref
        @nosent, @file-nosent

    For more information, see the documentation for `@asis`_, `@auto`_, `@file`_, `@noref`_, `@nosent`_ and `@thin`_
    in Leo's `programming reference`_ chapter.

    \@auto trees allow you to edit external files that contain no sentinels.
    Leo will import the @auto files when reading .leo files.  Be careful when first creating the @auto node.
    *Before* saving the .leo file containing the new @auto node,
    use the read-at-auto-nodes command to do the initial import.

.. _`@all`:
.. _`@all directive`:

``@all``
    A directive_ that copies the `body text`_ of all nodes_ in an `@thin` tree to the corresponding `external file`_.
    For more information, see `directives for programming`_ in `Leo's tutorial`_.

.. _`@others`:
.. _`@others directive`:

``@others``
    A directive_ that copies the `body text`_ of all nodes_ *except* `section definition nodes`_
    in an `@thin` tree to the corresponding `external file`_.
    For more information, see `directives for programming`_ in `Leo's tutorial`_.

.. _`@unit`:
.. _`@unit directive`:

``@unit``
    A directive_ that expands the scope_ of definitions in `@root` trees.
    For more information, see the `@unit documentation` in Leo's `programming reference`_.

.. _`body pane`:

``Body pane``
    The pane containing the `body text`_ of the currently selected headline_ in the `outline pane`_.

.. _`body text`:

``Body text``
    The text in the `body pane`_.  Body text is always associated with a particular node_.

.. _`body text box`:

``Body text box``
    A small blue box in the `icon box`_ indicating that the node_ contains `body text`_.

.. _`child`:
.. _`children`:

``Child``
    A node_ directly contained by a node.

.. _`chunk`:
.. _`chunks`:

``Chunk``
    A section_ (noweb_ terminology).

.. _`clone`:
.. _`clones`:
.. _`cloned`:

``Clone``
    A copy of a tree_ that changes whenever the original changes.
    The original and all clones are treated equally:
    no special status is given to the "original" node_.

.. _`clone arrow`:
.. _`clone arrows`:

``Clone Arrow``
    A small red arrow in the `icon box`_ indicating that the node_ is a clone_.

.. _`code part`:
.. _`code parts`:

``Code part``
    A part of a `section definition`_ that contains code. 
    Code parts start with ``@c`` or ``@code`` directives_ and continue until the next `doc part`_

.. _contract:
.. _contracts:
.. _contracted:

``Contract``:
    To hide all descendants_ of a node_.

.. _`cweb`:

``CWEB``
    A `literate programming`_ language invented by Donald Knuth and Silvio Levy.
    The `CWEB language`_ produces external files for the C language.

.. _`demote`:

``Demote``
    To move all siblings_ that follow a node_ so that they become children_ of the node.

.. _`external file`:
.. _`external files`:

``external file``
    The file created as the result of tangling_ a node containing an ``@root`` directive_.
    The file consists of the expansion of the text following the ``@root`` directive_.
    For more information, see the `external files section`_ of `Leo's tutorial`_.

.. _`descendant`:
.. _`descendants`:

``Descendant``
    An offspring_ of a node_.  That is, a child_, grandchild_, etc. of a node.

.. _`directive`:
.. _`directives`:

``Directive``
    A keyword, preceded by an '@' sign, in `body text`_ that controls Leo's operation.
    The keyword is empty for the ``@`` directive.
    For more information, set the `Leo directives`_ section of `Leo's tutorial`_.

.. _`doc part`:
.. _`doc parts`:

``Doc part, @doc part, document part, etc.``
    A part_ of a `section definition`_ that contains comments.
    Doc parts start with ``@`` and continue until the ``@c`` directive_ or the end of the `body text`_.
    In `@root trees`_, doc parts are associated with the immediately following `code part`_, if any.

.. _`escape convention`:
.. _`escape conventions`:

``Escape convention``
    A convention for representing sequences of characters that would otherwise have special meaning.
    Leo has only one such convention:
    in `@root trees`_, ``@@`` in the leftmost column of a `code part`_ stands for a single ``@`` character.
    **Important**:
    Leo does not support `noweb's`_ ``@<<`` and ``@>>`` escape conventions.
    Any line containing matched ``<<`` and ``>>`` is a `section reference`_, regardless of context.
    To use ``<<`` and ``>>`` as ordinary characters, place them on separate lines.

.. _expand:
.. _expands:
.. _expanded:

``expand``
    To make the children_ of a node_ visible.

.. _`grandchild`:
.. _`grandchildren`:

``Grandchild``
    The child_ of a child of a node_.

.. _`headline`:
.. _`headlines`:
.. _`headline text`:

``Headline``
    The headline text of a node_.  The part of the node visible in the `outline pane`_

.. _`hoist`:
.. _`hoisted`:
.. _`dehoist`:

``Hoist & dehoist``
    Hoisting a node_ redraws the screen that node and its descendants_ becomes the only visible part of the outline_.
    Leo prevents the you from moving nodes outside the hoisted outline.  Dehoisting a node restores the outline.
    Multiple hoists may be in effect: each dehoist undoes the effect of the immediately preceding hoist.

.. _`icon box`:
.. _`icon boxes`:

.. _`LaTex`:

``LaTex``
    A markup language often used in `literate programming` environments.
    See: http://www.latex-project.org/

``Icon box``
    An icon just to the left of `headline text`_ of a node_ indicating whether the node is cloned, marked or dirty,
    and indicating whether the node contains `body text`_.

.. _`Leo1`:
.. _`Leo2`:

``Leo1 and Leo2``
    **Leo1** denotes all versions of Leo that write version 1 .leo files, that is,
    all Windows version of Leo prior to version 2.0.
    The last version of Leo1, version 1.15, understands enough about Leo2 to issue a warning when opening version 2 files.

    **Leo2** denotes all versions of Leo that write version 2 .leo files, that is,
    all versions of leo.py and all Windows versions with version number 2.0 and above.
    Only Leo2 can generate `external files`_ from `@file trees`_.

.. _`literate programming`:

``Literate programming``
    A style of programming that aims at producing the highest quality program listings.
    Literate programming languages apply two fundamental operations to text: weaving_ and tangling_.
    Leo supports two literate programming languages, `CWEB`_ and `noweb`_.
    For more links see the `literate programming web page`_.

.. _`mark`:
.. _`marks`:

``Mark``
    A red vertical line in the `icon box`_ of a node_.

.. _node:
.. _nodes:

``Node``
    The organizational unit of an outline_. The combination of `headline text`_ and `body text`_.
    Sometimes used as a synonym for tree_.

.. _`noweb`:
.. _`noweb's`:

``noweb``
    A literate programming language invented by Norman Ramsey.
    The `noweb language`_ can produce `external files`_ for any text-based programming language.

.. _`offspring`:

``Offspring``
    The children_, grandchildren_, etc. of a node_.

.. _`organizing node`:
.. _`organizing nodes`:
.. _`organizer node`:
.. _`organizer nodes`:

``Organizing node``, ``organizer node``
    A node_ containing no `body text`_.
    Organizing nodes may appear anywhere in an `@file tree`_; they do not affect the external file in any way.
    In particular, organizing nodes do not affect indentation in `external files`_.

.. _`orphan`:
.. _`orphan node`:
.. _`orphan nodes`:

``Orphan node``
    A node_ that would not be copied to a `external file`_.
    Orphan nodes can arise because an `@thin tree`_ has no ``@others`` or ``@all`` directives_.
    Sections_ that are defined but not used also create orphan nodes.

    Leo issues a warning when attempting to write an `@thin tree`_ containing orphan nodes,
    and does not save the `external file`_.
    No information is lost; Leo saves the information in the `@thin tree`_ in the .leo file.
    Leo will load the `@thin tree`_ from the .leo file the next time Leo opens the .leo file.

.. _`outline`:
.. _`outliner`:
.. _`outlines`:

``Outline``
    - A node_ and its descendants_.
    - A tree_
    - All the nodes_ of a .leo file.

.. _`outline order`:

``Outline Order``
    The order that nodes_ appear on the screen when all nodes_ are expanded.

.. _`outline pane`:

``Outline pane``
    The pane containing a visual representation of the entire outline_, or a part of the outline_ if the outline is hoisted_.

.. _parent:
.. _parents:

``Parent``
    The node_ that directly contains a node.

.. _`part`:
.. _`parts`:

``Part``
    A synonym for section_.  See also `code part`_ and `doc part`_.

.. _`pdf file`:
.. _`.pdf file`:

``pdf file``
    A file that can be read by Adobe Acrobat.

.. _`plugin`:
.. _`plugins`:

``Plugin``
    - A Python file in Leo's ``plugins`` folder.
    - A way to modify and extend Leo without changing Leo's core code.
      ``leoPlugins.leo`` contains all of Leo's official plugins.

    See `Writing plugins and hooks`.

.. _`promote`:

``Promote``
    To move all children_ of a node_ in an outline so that they become siblings_ of the node.

.. _reStructuredText:
.. _rST:

``reStructuredText (rST)``
    A simple, yet powerful markup language for creating .html, or LaTeX output files.
    See the `rST primer`_.

.. _`root`:
.. _`root node`:

``Root``
    - The first node_ of a .leo file.
    - The first node of an `@root`_ tree or `@file`_ tree.

.. _`rst3 plugin`:

``rST plugin``
    A plugin_ that supports reStructuredText_.
    Unlike previous rst plugins, the rst3 plugin supports per-node options.

.. _`scope`:

``Scope``
    The portion of the outline_ in which a `section definition`_ is known.

.. _`section`:
.. _`sections`:

``Section``
    A fragment of text that can be incorporated into `external files`_.
    See the `Quick start for programmers`_ in `Leo's tutorial`_ for more details.

.. _`section definition`:
.. _`section definitions`:

``Section definition``:
    The `body text`_ of a `section definition node`_.
    See the `Quick start for programmers`_ in `Leo's tutorial`_ for more details.

.. _`section definition node`:
.. _`section definition nodes`:

``Section definition node``
    A node_ whose headline_ starts with a `section name`_ and whose body text defines a section_.
    See the `Quick start for programmers`_ in `Leo's tutorial`_ for more details.

.. _`section name`:
.. _`section names`:

``Section name``
    A name enclosed in ``<<`` and ``>>``.
    Section names may contain any characters except newlines and ">>".
    See the `Quick start for programmers`_ in `Leo's tutorial`_ for more details.

.. _`section reference`:
.. _`section references`:
.. _`reference`:
.. _`references`:
.. _`referenced`:

``Section reference``
    A `section name`_ appearing in a `code part`_.
    Tangling_ replaces all references by their definitions.
    See the `Quick start for programmers`_ in `Leo's tutorial`_ for more details.

.. _`sentinel`:
.. _`sentinels`:
.. _`sentinel lines`:

``Sentinels, sentinel lines``
    Comment lines in files derived from `@file nodes`_.
    Such lines start with an ``@`` following the opening comment delimiter.
    Sentinels embed outline structure into `external files`_.
    **Do not alter sentinel lines**.  Doing so can corrupt the outline structure.
    For more information see `Sentinel lines`_ in `Leo's tutorial`_.

.. _`@settings`:
.. _`setting`:
.. _`settings`:

``Setting``:
    Plugins_ and other parts of Leo can get options from ``@settings`` trees,
    outlines_ whose headline_ is ``@settings``. When opening a .leo file, Leo looks
    for ``@settings`` trees in the outline being opened and also in various
    ``leoSettings.leo files``. ``@settings`` trees allow plugins_ to get options without
    any further support from Leo's core code. For a full discussion of
    @settings trees, see `Chapter 8: Customizing Leo`_.

.. _`sibling`:
.. _`siblings`:

``Sibling``
    Two nodes_ are siblings if they have the same parent_.  Siblings of the root_ have no parent.

.. _`tangle`:
.. _`tangles`:
.. _`tangling`:

``Tangling``
    The process of creating `external files`_ from `@root trees`_ or `@file trees`_.
    Leo tangles `@file trees`_ automatically when writing a .leo file.
    You must explicitly tangle_ `@root trees`_ using the ``Tangle`` command.
    Tangling expands all `section references` in an `@root node`_ or `@file node`_.
    For more information, see `Tangling @root trees`_ in Leo's `programming reference`_.

.. _`target language`:

``Target language``
    The language used to syntax color text.
    This determines the default comment delimiters used during tangling_ and untangling_.

.. _`tree`:
.. _`trees`:

``Tree``
    An outline_.
    A node_ and its descendants_.

.. _`untangle`:
.. _`untangles`:
.. _`untangling`:

``Untangling``
    Updating an outline_ based on changes to `external files`_.
    Untangling allows changes to be propagated from external files back to the outline.
    Especially useful when fixing syntax errors outside Leo.
    For more information, see `Untangling @root trees`_ in Leo's `programming reference`_.

.. _`weave`:
.. _`weaves`:
.. _`weaving`:

.. _`view node`:
.. _`view nodes`:

``View node``
    A `node`_ that represents a view of an `outline`_.
    View nodes are typically ordinary, non-`cloned`_ nodes that contain cloned `descendant`_ nodes.
    The cloned descendant nodes comprise most of the data of the view.
    Other non-cloned nodes may add additional information to the view.
    See `clones & views`_ in the `Leo's tutorial`_ for more information.

``Weaving``
    The process of creating typeset documentation from a noweb_ or CWEB_ source file.
    Weaving creates documentation. Tangling_ creates `external files`_.
    Leo does not support weaving directly.
    To weave a file you can create noweb_ or CWEB_ files using Leo's ``Export`` commands,
    then use the noweb_ or CWEB_ systems to weave those files.

